{"version":3,"sources":["helpers.js","components/StorePicker.js","components/Header.js","components/Order.js","components/AddFishForm.js","components/EditFishForm.js","components/Login.js","base.js","components/Inventory.js","sample-fishes.js","components/Fish.js","components/App.js","components/NotFound.js","components/Router.js","index.js"],"names":["formatPrice","cents","toLocaleString","style","currency","rando","arr","Math","floor","random","length","getFunName","adjectives","StorePicker","myInput","React","createRef","goToStore","event","preventDefault","storeName","current","value","props","history","push","Fragment","className","onSubmit","this","type","ref","required","placeholder","defaultValue","Component","Header","tagline","age","Order","renderOrder","key","fish","fishes","count","order","isAvailable","status","transitionObptions","classNames","timeout","enter","exit","CSSTransition","TransitionGroup","component","name","price","onClick","removeFromOrder","orderIds","Object","keys","total","reduce","prevTotal","map","AddFishForm","nameRef","priceRef","statusRef","descRef","imageRef","createFish","parseFloat","desc","image","addFish","currentTarget","reset","EditFishForm","handleChange","console","log","updatedFish","updateFish","index","onChange","deleteFish","Login","authenticate","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","base","Rebase","createClass","database","Inventory","state","uid","owner","authHandler","authData","a","fetch","storeId","context","store","post","data","user","setState","provider","authProvider","auth","signInWithPopup","then","logout","signOut","onAuthStateChanged","loadSampleFishes","fish1","fish2","fish3","fish4","fish5","fish6","fish7","fish8","fish9","Fish","handleClick","addToOrder","details","src","alt","disabled","App","Date","now","sampleFishes","params","match","localStorageRef","localStorage","getItem","JSON","parse","syncState","setItem","stringify","removeBinding","cool","NotFound","Router","exact","path","render","document","querySelector"],"mappings":"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","file":"static/js/main.6c9c3bad.chunk.js","sourcesContent":["export function formatPrice(cents) {\n  return (cents / 100).toLocaleString(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\"\n  });\n}\n\nexport function rando(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function slugify(text) {\n  return text\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\")\n    .replace(/[^\\w-]+/g, \"\")\n    .replace(/--+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\");\n}\n\nexport function getFunName() {\n  const adjectives = [\n    \"adorable\",\n    \"beautiful\",\n    \"clean\",\n    \"drab\",\n    \"elegant\",\n    \"fancy\",\n    \"glamorous\",\n    \"handsome\",\n    \"long\",\n    \"magnificent\",\n    \"old-fashioned\",\n    \"plain\",\n    \"quaint\",\n    \"sparkling\",\n    \"ugliest\",\n    \"unsightly\",\n    \"angry\",\n    \"bewildered\",\n    \"clumsy\",\n    \"defeated\",\n    \"embarrassed\",\n    \"fierce\",\n    \"grumpy\",\n    \"helpless\",\n    \"itchy\",\n    \"jealous\",\n    \"lazy\",\n    \"mysterious\",\n    \"nervous\",\n    \"obnoxious\",\n    \"panicky\",\n    \"repulsive\",\n    \"scary\",\n    \"thoughtless\",\n    \"uptight\",\n    \"worried\"\n  ];\n\n  const nouns = [\n    \"women\",\n    \"men\",\n    \"children\",\n    \"teeth\",\n    \"feet\",\n    \"people\",\n    \"leaves\",\n    \"mice\",\n    \"geese\",\n    \"halves\",\n    \"knives\",\n    \"wives\",\n    \"lives\",\n    \"elves\",\n    \"loaves\",\n    \"potatoes\",\n    \"tomatoes\",\n    \"cacti\",\n    \"foci\",\n    \"fungi\",\n    \"nuclei\",\n    \"syllabuses\",\n    \"analyses\",\n    \"diagnoses\",\n    \"oases\",\n    \"theses\",\n    \"crises\",\n    \"phenomena\",\n    \"criteria\",\n    \"data\"\n  ];\n\n  return `${rando(adjectives)}-${rando(adjectives)}-${rando(nouns)}`;\n}\n","import React from 'react';//always need to do this\r\nimport PropTypes from 'prop-types';\r\nimport {getFunName} from '../helpers';\r\n\r\nclass StorePicker extends React.Component {//make your sausage :)\r\n\r\n    static propTypes = {\r\n        history: PropTypes.object\r\n    };\r\n\r\nmyInput = React.createRef();//we've just created an empty 'ref' for the form that we can use to touch DOM\r\n\r\ngoToStore =(event)=>{//arrow function binds the methods much like using the constructor as seen at bottom\r\nevent.preventDefault();//this method prevents the HTML form from submitting each time the submit button is pressed \r\nconst storeName = this.myInput.current.value;//can now access \"this\" instance, taking user input value\r\n\r\nthis.props.history.push(`/store/${storeName}`);//push to the next page based on user input!\r\n//notice this path to push() above, this comes from looking at props on chrome dev tools\r\n\r\n}\r\n    render() {\r\n\r\n       /* return React.createElement('p', {className: \"hey\"}, \"this is a sentence\");\r\n        above code is a way to create HTML elements in JS using React. Notice the use of\r\n        'className' to assign a class to the element.*/\r\n        return (\r\n        //note, we cannot add sibling elements (separate from other elements) such as:\r\n        //<p>Hello</p>\r\n        //we can, however, do the following to overcome this limitation:\r\n        //we wrap in a React Fragment:\r\n\r\n        <React.Fragment>\r\n    \r\n        <form className=\"store-selector\" onSubmit={this.goToStore}> {/**method to visit store page */}\r\n            <h2>Please enter a store</h2>\r\n            <input \r\n            type=\"text\" \r\n            ref={this.myInput}//surfaces the input on the component so we can grab it\r\n            required \r\n            placeholder='Enter a store name' \r\n            defaultValue={getFunName()}  \r\n            />\r\n\r\n            <button type=\"submit\">{`Visit Store->`}</button>\r\n        </form>\r\n        </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n/**Note the use of brackets in the snippet 'return (code...)' -- the html is run before the final data\r\n * is returned. Note, 'return()' would not work as return is not a function. We need the space after return:\r\n * 'return ()' * \r\n */\r\nexport default StorePicker;//export sausage!\r\n\r\n\r\n\r\n\r\n/**NOTES ABOUt ABOVE:: -- The below is a less efficient way of doing the above when accessing \"this\"\r\n * \r\n * class StorePicker extends React.Component {//make your sausage :)\r\n\r\nconstructor(){//this will run before StorePicker component is created\r\n    super();//runs the 'extends' part of the component above, calls those methods\r\n    console.log(\"gonna create a component\");\r\n    this.goToStore = this.goToStore.bind(this);\r\n    //the above 'binding' method is required for us to be able to access the 'this' instance of StorePicker\r\n}\r\n\r\nmyInput = React.createRef();//we've just created an empty 'ref' for the form that we can use to touch DOM\r\n\r\ngoToStore(event){\r\nevent.preventDefault();//this method prevents the HTML form from submitting each time the submit button is pressed \r\nconsole.log(this)//can now access due to binding!\r\n}\r\n */","import React from 'react';\r\nimport PropTypes from \"prop-types\";//separate package from React - there are other ways too, FB's Flow etc \r\n\r\n/**The below code utilizes an arrow function syntax to code a header component. It is called\r\n * a STATELESS FUNCTIONAL COMPONENT Note the difference between this and the further code below. Where\r\n * '({tagline, age})' is used, we can also write ({props}), and then write '{props.tagline}' below etc.\r\n * WE USE THESE STATELESS COMPONENTS when it is just a component that received some prop data and spits\r\n * it back out. Saves a little on efficiency. We still need to write components the other way if they do \r\n * more than this.\r\n */\r\nconst Header = ({tagline, age})=> ( //destructuring the props gives us these two variables to use\r\n        <header className=\"top\">\r\n            <h1>\r\n            Catch \r\n            <span className=\"ofThe\">\r\n                <span className =\"of\">Of</span>\r\n                <span className=\"the\">The</span>\r\n            </span>\r\n            Day\r\n            </h1>\r\n            <h3 className=\"tagline\">\r\n            <span>{tagline}</span>{/**we want to make this DYNAMIC so we can change at any time, \r\n                                            see App.js */}\r\n    </h3>\r\n    </header>\r\n    );\r\n\r\n    //this code below basically checks that the data being passed via props as 'tagline' is a string.\r\n    //this is prop data-validation for STATELESS FUNCTIONAL COMPONENTS like the above. See Fish.js for \r\n    //info on how to code STATIC prop types\r\nHeader.propTypes ={\r\n    tagline: PropTypes.string.isRequired\r\n};\r\n\r\n\r\n\r\n\r\n/** \r\nclass Header extends React.Component{\r\n    render() {\r\n        return (\r\n\r\n        <React.Fragment>\r\n        <header className=\"top\">\r\n            <h1>\r\n            Catch \r\n            <span className=\"ofThe\">\r\n                <span className =\"of\">Of</span>\r\n                <span className=\"the\">The</span>\r\n            </span>\r\n            Day\r\n            </h1>\r\n            <h3 className=\"tagline\">\r\n            <span>{this.props.tagline}</span>{/**we want to make this DYNAMIC so we can change at any time, \r\n                                            see App.js *////}\r\n/*    </h3>\r\n    </header>\r\n    </React.Fragment>\r\n\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\nexport default Header;\r\n/**NOTES: Looking at the code above (and App.js), we can see that we gave some data in object form\r\n * to the header element (tagline, age and our own made-up prop, cool). This data can be accessed in the \r\n * Header.js file as you can see above. We need {}s since we revert to JS to call this data.\r\n * \r\n * NOTE about '$r' - use this in dev tools, when a component is selected, go to the console and type in $r.\r\n * this will return all the info (props, state etc) regarding this selected react component (or any element). \r\n * '$0' can be used in the same way for regular HTML elements.\r\n */","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport {formatPrice} from '../helpers';\r\nimport { TransitionGroup, CSSTransition} from 'react-transition-group';//import these for animations\r\n\r\nclass Order extends React.Component{\r\n\r\n    //for the Data validation below, we can go further and shape out the object Prop Types like in Fish.js etc\r\n    static propTypes={\r\n        fishes: PropTypes.object,\r\n        order: PropTypes.object,\r\n        removeFromOrder: PropTypes.func\r\n    };\r\n\r\nrenderOrder=(key)=>{\r\n    const fish = this.props.fishes[key];\r\n    const count = this.props.order[key];\r\n    const isAvailable = fish && fish.status ===\"available\";//make sure 'fish' is loaded AND available!!\r\n    const transitionObptions = {//this acts like component props for <CSSTransition> below\r\n        classNames:\"order\", \r\n        key:key, \r\n        timeout:{enter:500, exit:500}\r\n    };\r\n\r\n    if(!fish) return null;\r\n    //we set this return of the 'if' statement to null so that while the page waits for firebase to return\r\n    //the set of fishes, there is no order displayed, then the fishes come in from firebase and the local\r\n    //storage can reload the order, based on the fishes that the page now has back. \r\n    if(!isAvailable){\r\n    return  (\r\n            <CSSTransition {...transitionObptions}>{/**spread props in */}\r\n            <li key={key}>\r\n            Sorry {fish ? fish.name: 'fish'} is no longer available\r\n            </li>\r\n            </CSSTransition>\r\n    );\r\n    };\r\n    return (\r\n        //css animation settings:\r\n        <CSSTransition {...transitionObptions}>\r\n        <li key={key}>\r\n        <span>{/**span used here for CSS purposes */}\r\n\r\n    <TransitionGroup component=\"span\" className=\"count\">\r\n    <CSSTransition \r\n        classNames=\"count\" \r\n        key={count}\r\n        timeout={{enter:500, exit:500}}>\r\n    <span>{count}</span> \r\n    </CSSTransition>\r\n    </TransitionGroup>\r\n\r\n        lbs {fish.name}\r\n        {formatPrice(count*fish.price)}\r\n        <button onClick={()=>this.props.removeFromOrder(key)}>&times;</button>\r\n    </span>\r\n    </li>\r\n    </CSSTransition>\r\n    );\r\n};\r\n//above, we separated out the rendering (renderOrder) into a function that can be called below -- cleaner code!\r\n\r\n    render() {\r\n\r\n        const orderIds = Object.keys(this.props.order);//gets the key for each fish order.\r\n        const total = orderIds.reduce((prevTotal, key)=>{\r\n            const fish = this.props.fishes[key];\r\n            const count = this.props.order[key];\r\n            const isAvailable = fish && fish.status ===\"available\";\r\n\r\n            if(isAvailable){\r\n                return prevTotal+(count*fish.price);\r\n            }\r\n                return prevTotal;\r\n            \r\n        }, 0);\r\n       \r\n        return (\r\n\r\n            <div className =\"order-wrap\">\r\n               <h2>Order</h2> \r\n               <TransitionGroup component=\"ul\"  className='order'>\r\n                   {orderIds.map(this.renderOrder)} \r\n        {/**Using map to map over each order, using key as argument, then displaying key */}\r\n               </TransitionGroup>\r\n              <div className='total'>\r\n              Total:\r\n                  <strong>{formatPrice(total)}</strong>\r\n              </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Order;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass AddFishForm extends React.Component{\r\n\r\n    nameRef=React.createRef();\r\n    priceRef=React.createRef();\r\n    statusRef=React.createRef();\r\n    descRef=React.createRef();\r\n    imageRef=React.createRef();\r\n\r\n    //propType data validation\r\n    static propTypes ={\r\n        addFish: PropTypes.func.isRequired\r\n    };\r\n\r\n    createFish=(event)=>{\r\n        event.preventDefault();//stop form from submitting\r\n        //lets make our fish!\r\n\r\n        const fish ={\r\n            name:this.nameRef.current.value,\r\n            price:parseFloat(this.priceRef.current.value),//using parseFloat for money here, storing all as cents\r\n            status:this.statusRef.current.value,\r\n            desc:this.descRef.current.value,\r\n            image:this.imageRef.current.value,\r\n        }\r\n        this.props.addFish(fish);\r\n        //refresh the form after user entry - here, currentTarget is the form itself\r\n        event.currentTarget.reset();\r\n\r\n    /**Now we need to push all this fish data into 'state'. Since App.js is the parent component, and can\r\n     * pass data along to its children (i.e. header, inventory, order etc), we can set up the state in App.js\r\n     * and pass whatever data when it is neccessary\r\n     */\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"fish-edit\" onSubmit={this.createFish}>\r\n\r\n            <input name=\"name\" ref={this.nameRef} type=\"text\" placeholder=\"Name\" />\r\n            <input name =\"price\" ref={this.priceRef} type=\"text\" placeholder=\"Price\" />\r\n            <select name =\"status\" ref={this.statusRef}>\r\n                <option value=\"available\">Fresh!</option>\r\n                <option value=\"unavailable\">Sold Out!</option>\r\n            </select>\r\n            <textarea name =\"desc\" ref={this.descRef} placeholder=\"Desc\"></textarea>\r\n            <input name = \"image\" ref={this.imageRef} type=\"text\" placeholder=\"Image\" />\r\n            <button type=\"submit\">+ Add Fish</button>\r\n\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddFishForm;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { object } from 'prop-types';\r\n\r\nclass EditFishForm extends React.Component{\r\n\r\n    static propTypes ={\r\n        fish: PropTypes.shape({\r\n            image: PropTypes.string,\r\n            name: PropTypes.string,\r\n            desc: PropTypes.string,\r\n            status: PropTypes.string,\r\n            price: PropTypes.number\r\n        }),\r\n        index: PropTypes.string,\r\n        updateFish: PropTypes.func,\r\n    }\r\n\r\nhandleChange = (event) =>{//user enters some data in the fields\r\nconsole.log(event.currentTarget.name); \r\n//update that fish\r\n//1. take a copy of the current fish\r\nconst updatedFish = {\r\n    ...this.props.fish,\r\n    //overwrite the value that is currently in state for whatever the user entered\r\n    [event.currentTarget.name]: event.currentTarget.value //user-input value\r\n};\r\nthis.props.updateFish(this.props.index, updatedFish);//update fish and send data upstream to App.js\r\n\r\n};\r\n    render() {\r\n        return (\r\n            <div className='fish-edit'>\r\n            {/**Here, our inputs have values set to the STATE values, in App.js. If a change is made\r\n            the onChange method kicks in, but react prevents any changes to STATE. See above */}\r\n            <input type=\"text\" name=\"name\" onChange={this.handleChange} value={this.props.fish.name} />\r\n            <input type=\"text\" name=\"price\" onChange={this.handleChange} value={this.props.fish.price} />\r\n            <select type=\"text\" name=\"status\" onChange={this.handleChange} value={this.props.fish.status}>\r\n                <option value=\"available\">Fresh!</option>\r\n                <option value=\"unavailable\">Sold Out!</option>\r\n            </select>\r\n            <textarea type=\"text\" name=\"desc\" onChange={this.handleChange} value={this.props.fish.desc} />\r\n            <input type=\"text\" name=\"image\" onChange={this.handleChange} value={this.props.fish.image} />\r\n\r\n            <button onClick={()=>this.props.deleteFish(this.props.index)}>Remove Fish</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default EditFishForm;\r\n/**NOTE--- DOING this: <input type=\"text\" name=\"name\" value={this.props.fish.name} /> \r\n * \r\n * means that STATE now exists in TWO places - App.js, and above. This is because we passed state down to \r\n * EditFishForm and React throws an error when trying to update state in two places like that. State \r\n * should only be accessed/changed in the App component. To overcome this, we code an 'onChange' event. \r\n*/","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//we'll use a stateless functional component again here: NOTE regular brackets, not curly.\r\n//Also, since it is an SFC, we must pass props as an argument, then access them WITHOUT the 'this' keyword\r\nconst Login =(props)=>(\r\n    <nav className='login'>\r\n        <h2>Inventory Login</h2>\r\n        <p>Sign in to manage your store's inventory</p>\r\n        <button className='github' onClick={()=> props.authenticate('Github')}>Log In With GitHub</button>\r\n                                    {/**Note we must use capitals for the Github in the function */}\r\n        <button className='facebook' onClick={()=> props.authenticate('Facebook')}>Log In With Facebook</button>\r\n    </nav>\r\n);\r\n\r\nLogin.propTypes={\r\n    authenticate: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Login;\r\n","import Rebase from 're-base';//this package allows us to mirror our state to firebase \r\nimport firebase from 'firebase';//original firebase package\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    \r\n        apiKey: \"AIzaSyAb7ZCJxjDDLme2ASPol7cS-APCECUoxsU\",\r\n        authDomain: \"catch-of-the-day--matt-howels.firebaseapp.com\",\r\n        databaseURL: \"https://catch-of-the-day--matt-howels-default-rtdb.firebaseio.com\",\r\n});\r\n\r\n//create a Rebase:\r\nconst base = Rebase.createClass(firebaseApp.database());//'.database' is a function that will return our DB\r\n\r\n//named export \r\nexport {firebaseApp};\r\n\r\n//default export\r\nexport default base;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport firebase from 'firebase';\r\nimport AddFishForm from './AddFishForm';\r\nimport EditFishForm from './EditFishForm';\r\nimport Login from './Login';\r\nimport base, { firebaseApp } from '../base';\r\n\r\nclass Inventory extends React.Component{\r\n\r\n    static propTypes ={\r\n        fishes: PropTypes.shape({\r\n            image: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            desc: PropTypes.string.isRequired,\r\n            status: PropTypes.string.isRequired,\r\n            price: PropTypes.number.isRequired\r\n        }),\r\n        updateFish: PropTypes.func.isRequired,\r\n        deleteFish: PropTypes.func.isRequired,\r\n        loadSampleFishes: PropTypes.func.isRequired\r\n    };\r\n\r\n    state={\r\n        uid:null,\r\n        owner:null\r\n    };\r\n\r\n    /**we want to listen for componentDidMount so that the program can check whether we are still logged\r\n     * in if the page is refreshed:\r\n     */\r\n    componentDidMount(){\r\n        firebase.auth().onAuthStateChanged(user=>{\r\n            if(user){\r\n                this.authHandler({user});//pass the logged in user to out authHandler()\r\n            };\r\n        });\r\n    };\r\n\r\n    authHandler= async (authData)=>{\r\n        //1. Look up the current store in firebase DB\r\n    const store = await base.fetch(this.props.storeId, {context:this}); //we put await infront so that the store is in the variable, not the promise from the fetch() function\r\n    console.log(store)//outputs all the fishes in that particular store\r\n        //2. Claim it if there is no onwer\r\n        if(!store.owner){\r\n            //save it as our own - i.e. push to firebase\r\n            await base.post(`${this.props.storeId}/owner`, {\r\n                data: authData.user.uid //go to Dev tools and branch out the auth data of the user who signed in -- uid is a unique identifier for that user\r\n            });\r\n        };\r\n        //3. Set state of inventory to reflect current user\r\n        //the below code will figure out whether the user signed in is the owner, or someone else.\r\n        //note, we are accessing state outside of App.js, but is ok since it is localized to Inventory.js\r\n        this.setState({\r\n            uid: authData.user.uid,\r\n            owner: store.owner || authData.user.uid\r\n        });\r\n    console.log(authData)\r\n    };\r\n\r\n    authenticate=provider=>{\r\n        const authProvider = new firebase.auth[`${provider}AuthProvider`]();//essentially .authFacebookauthProvider etc\r\n        firebaseApp\r\n        .auth()\r\n        .signInWithPopup(authProvider)\r\n        .then(this.authHandler);//data is passed to authHandler after user login\r\n    };\r\n\r\n    logout = async() =>{\r\n        console.log(\"logging out!\"),\r\n        await firebase.auth().signOut();\r\n        this.setState({ uid:null });\r\n    };\r\n\r\n    render() {\r\n\r\n        //HERE IS THE LOGOUT BUTTON--------------------------------------\r\n        const logout = <button onClick={this.logout}>Log Out!</button>\r\n\r\n        //check if they are logged in\r\n        if(!this.state.uid){//basically, if no one is logged on\r\n        return <Login authenticate={this.authenticate} />\r\n        };\r\n        //check if they are not the owner of the store\r\n        if(this.state.uid !== this.state.owner){\r\n            return <div>\r\n                <p>Sorry, you are not the owner of the store!</p>\r\n                {logout}{/**here is out logout button, and below also */}\r\n            </div>\r\n        }\r\n\r\n        /*i.e. if no user is logged on, the login section is rendered, user logs in, the code checks if the \r\n        user is the owner of that store page. If yes, the inventory is rendered*/\r\n        return (\r\n\r\n            <div className =\"inventory\">\r\n                <h2>Inventory</h2>\r\n                {logout}\r\n                {Object.keys(this.props.fishes).map(key=> \r\n                <EditFishForm \r\n                key={key} \r\n                index={key}\r\n                fish={this.props.fishes[key]} \r\n                updateFish={this.props.updateFish}\r\n                deleteFish={this.props.deleteFish}    \r\n                />)}\r\n                <AddFishForm addFish={this.props.addFish} /> \r\n            <button onClick={this.props.loadSampleFishes}>Load Sample Fishes</button>\r\n            \r\n            {/**Note about above-addFish is being passed down from parent app.js. It was first passed\r\n            to Inventory in App.js (line 29), adding it to Inventory's 'props'. Now it is passed down\r\n            again to addFishForm, but we must include props in the call. */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Inventory;","// This is just some sample data so you don't have to think of your own!\nconst fishes = {\n  fish1: {\n    name: \"Pacific Halibut\",\n    image: \"/images/hali.jpg\",\n    desc:\n      \"Everyone’s favorite white fish. We will cut it to the size you need and ship it.\",\n    price: 1724,\n    status: \"available\"\n  },\n\n  fish2: {\n    name: \"Lobster\",\n    image: \"/images/lobster.jpg\",\n    desc:\n      \"These tender, mouth-watering beauties are a fantastic hit at any dinner party.\",\n    price: 3200,\n    status: \"available\"\n  },\n\n  fish3: {\n    name: \"Sea Scallops\",\n    image: \"/images/scallops.jpg\",\n    desc:\n      \"Big, sweet and tender. True dry-pack scallops from the icey waters of Alaska. About 8-10 per pound\",\n    price: 1684,\n    status: \"unavailable\"\n  },\n\n  fish4: {\n    name: \"Mahi Mahi\",\n    image: \"/images/mahi.jpg\",\n    desc:\n      \"Lean flesh with a mild, sweet flavor profile, moderately firm texture and large, moist flakes. \",\n    price: 1129,\n    status: \"available\"\n  },\n\n  fish5: {\n    name: \"King Crab\",\n    image: \"/images/crab.jpg\",\n    desc:\n      \"Crack these open and enjoy them plain or with one of our cocktail sauces\",\n    price: 4234,\n    status: \"available\"\n  },\n\n  fish6: {\n    name: \"Atlantic Salmon\",\n    image: \"/images/salmon.jpg\",\n    desc:\n      \"This flaky, oily salmon is truly the king of the sea. Bake it, grill it, broil it...as good as it gets!\",\n    price: 1453,\n    status: \"available\"\n  },\n\n  fish7: {\n    name: \"Oysters\",\n    image: \"/images/oysters.jpg\",\n    desc: \"A soft plump oyster with a sweet salty flavor and a clean finish.\",\n    price: 2543,\n    status: \"available\"\n  },\n\n  fish8: {\n    name: \"Mussels\",\n    image: \"/images/mussels.jpg\",\n    desc:\n      \"The best mussels from the Pacific Northwest with a full-flavored and complex taste.\",\n    price: 425,\n    status: \"available\"\n  },\n\n  fish9: {\n    name: \"Jumbo Prawns\",\n    image: \"/images/prawns.jpg\",\n    desc:\n      \"With 21-25 two bite prawns in each pound, these sweet morsels are perfect for shish-kabobs.\",\n    price: 2250,\n    status: \"available\"\n  }\n};\n\nexport default fishes;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { formatPrice } from '../helpers';\r\n\r\nclass Fish extends React.Component{\r\n\r\n    //below is props data validation. We use shape here to define the 'shape' of the object, since what is \r\n    //being passed down as 'details' is actually the Fish object held in state. We use static here since\r\n    //these prop-types will be used for many instances of Fish, but we only need one set of validation rules.\r\n    static propTypes ={\r\n        details: PropTypes.shape({\r\n            image: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            desc: PropTypes.string.isRequired,\r\n            status: PropTypes.string.isRequired,\r\n            price: PropTypes.number.isRequired\r\n        }),\r\n        addToOrder: PropTypes.func //addToOrder is a function!\r\n    };\r\n\r\n    handleClick = ()=>{\r\n       this.props.addToOrder(this.props.index);\r\n       //this runs the addToOrder method passed to Fish, using the index key we set up for each fish\r\n    }\r\n\r\n    render(){\r\n    //using ES6 destructuring, we can do the following:\r\n\r\n    const {image, name, price, desc, status}=this.props.details;//look at component details in dev tools\r\n    const isAvailable = status === \"available\"; \r\n        \r\nreturn <li className='menu-fish'>\r\n    <img src={image} alt={name} />\r\n    <h3 className='fish-name'>{name}\r\n    <span className='price'>{formatPrice(price)}</span> {/**formatPrice method is from 'helpers.js' */}\r\n    </h3>\r\n    <p>{desc}</p>\r\n    <button disabled={!isAvailable} onClick={this.handleClick}>\r\n    {isAvailable ? \"Add To Order\" : \"Sold Out!\"}</button>\r\n</li>\r\n    }\r\n}\r\n\r\nexport default Fish;","import React from 'react';//first thing we need!\r\nimport PropTypes from 'prop-types';\r\nimport Header from './Header';//import here instead of index.js, as it is only needed here\r\nimport Order from './Order';\r\nimport Inventory from './Inventory';\r\nimport sampleFishes from '../sample-fishes';\r\nimport Fish from './Fish';\r\nimport base from \"../base\";//so we can mirror to DB\r\n\r\nclass App extends React.Component{\r\n\r\n    //we need to create state now, and move the data from the form in. We set an INITIAL state:\r\n    //state and the methods that update state must be in same component\r\n\r\n    state = {\r\n        fishes:{},\r\n        order:{}\r\n    };\r\n\r\n    //proptype data validation for this.props.match --- only props in this component\r\n    static propTypes ={\r\n        match: PropTypes.object.isRequired\r\n    };\r\n\r\n    //now we need to sync with the DB:\r\ncomponentDidMount(){\r\n    const {params}= this.props.match;//check path on dev tools!\r\n    //WE MUST re-instate local storage here, otherwise it is overwritten when page refreshes\r\n    const localStorageRef = localStorage.getItem(params.storeId);\r\n    \r\n    if(localStorageRef){\r\n        this.setState({order: JSON.parse(localStorageRef)});\r\n    }\r\n    //we do '/fishes' to get to the fishes object which we need to mirror to the DB\r\n    this.ref = base.syncState(`${params.storeId}/fishes`, {\r\n        context: this,\r\n        state: 'fishes'\r\n    });\r\n};\r\n\r\ncomponentDidUpdate(){\r\n    console.log(\"updated\");\r\n    localStorage.setItem(this.props.match.params.storeId, JSON.stringify(this.state.order));\r\n    //above has two args - the key name (store Id), and the state/item/key value we want to store\r\n    //check above path on Dev Tools! state.order is an object, so we must use stringify to extract the data\r\n    console.log(this.state);\r\n}\r\n\r\n//this method unmounts the app when user back-pages out of current state/DB mirror\r\ncomponentWillUnmount(){\r\n    base.removeBinding(this.ref);\r\n};\r\n    //below is how we add to state - three step process:\r\naddFish = (fish)=>{\r\n    //1-take a copy of exisiting state - we don't want to modify it directly\r\n    const fishes = {...this.state.fishes};//use spread\r\n    //2-add new fish to fishes variable/object- using date.now here gives a unique value to each fish\r\n    fishes[`fish${Date.now()}`]=fish;//this 'fish' is taken from addFishForm.js data, i.e user input\r\n    //3 - set new fishes object to state\r\n    this.setState({\r\n        fishes:fishes //can also say just 'fishes'. Also, note we are updating a PIECE of state (no 'order' yet)\r\n    });\r\n//the above setState call basically overrides the initially set state above (line 11), populates with data;\r\n};\r\n\r\nupdateFish = (key, updatedFish) =>{\r\n    //take a copy of the current state\r\n    const fishes = {...this.state.fishes};\r\n    //update that state\r\n    fishes[key]=updatedFish;\r\n    //set to state\r\n    this.setState ({fishes:fishes});\r\n};\r\n\r\ndeleteFish = (key)=>{\r\n    //take a copy of state\r\n    const fishes = {...this.state.fishes};\r\n    //update state\r\n    fishes[key]=null;\r\n    //update state\r\n    this.setState({fishes:fishes});\r\n}\r\n\r\nloadSampleFishes = ()=>{\r\n   this.setState({fishes:sampleFishes});\r\n};\r\n\r\naddToOrder = (key)=>{ //we need to be able to use and access 'key', but we can't without passing it as a prop\r\n    //1.Take a copy of state:\r\n    const order = {...this.state.order};\r\n    //2.add to order/update number in order\r\n    order[key] = order[key] +1 || 1; // increments count of whatever fish is in order\r\n    //3. call setState to update order state\r\n    this.setState({ order:order });\r\n};\r\n\r\nremoveFromOrder = (key)=>{\r\n    //1.Take a copy of state:\r\n    const order = {...this.state.order};\r\n    //2.remove this item from order\r\n    delete order[key]; // increments count of whatever fish is in order. We can use delete because no Firebase here, we use local storage\r\n    //3. call setState to update order state\r\n    this.setState({ order:order });\r\n}\r\n//NOTE = ALL METHODS/DATA is passed to components via PROPS\r\n//REMEMBER TO MANUALLY CHECK METHODS in dev tools, using '$r.${methodName(\"whatever args\")}'\r\n\r\n\r\nrender (){\r\n    return (\r\n        <div className=\"catch-of-the-day\">\r\n            <div className=\"menu\">\r\n                <Header tagline=\"Fresh Seafood Market\" age={500} cool=\"true\"/>\r\n             \r\n              {/*  <Header tagline=\"Wes Is Cool\" />   this creates ANOTHER INSTANCE of Header */}\r\n            <ul className=\"fishes\">\r\n            {Object.keys(this.state.fishes).map(key=> \r\n            <Fish \r\n            key={key} \r\n            index={key}//this allows us to pass the 'key' as a prop, otherwise we have no access. DEV TOOLS\r\n            details={this.state.fishes[key]} \r\n            addToOrder={this.addToOrder}    \r\n            />\r\n            )} {/**Object.keys gives us each fish key for each fish object, i.e fish1, fish2 etc */}\r\n\r\n            </ul>\r\n            \r\n            </div>\r\n            <Order \r\n            fishes={this.state.fishes} \r\n            order={this.state.order}\r\n            removeFromOrder={this.removeFromOrder}    \r\n            />\r\n            <Inventory \r\n            addFish={this.addFish} \r\n            updateFish={this.updateFish}\r\n            deleteFish={this.deleteFish}\r\n            loadSampleFishes={this.loadSampleFishes} \r\n            fishes = {this.state.fishes}  \r\n            storeId = {this.props.match.params.storeId} //pass the store name to Inventory.js\r\n            />\r\n        </div>\r\n    );\r\n}\r\n}\r\nexport default App;\r\n\r\n/**A NOTE ON PROPS AND STATE - state is where the data is held, its home if you like.\r\n * PROPS are how that data gets manipulated and moved to another end point\r\n */\r\n/**ANOTHER NOTE == Refer to 'helpers.js' for reg JS functions that operate on the site, but are not\r\n * unique to React and don't need to be rendered as components\r\n */\r\n/**PASSING STATE: <Order fishes {...this.state}/> --- this will pass ALL of state to Order, but we might\r\n * not want that when we add more things to state, but don't want that new data passed. We should only be\r\n * passing data that we explicitly need!\r\n */\r\n","import React from 'react';\r\n\r\n//This is also a Stateless Functional Component\r\nconst NotFound = ()=>(\r\n    <div>\r\n        <h2>NOT FOUND!!!</h2>\r\n    </div>\r\n);\r\n\r\nexport default NotFound;","/**THIS COMPONENT DEALS WITH ROUTING. I.e where we can navigate to on our React website */\r\nimport React from 'react';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport StorePicker from \"./StorePicker\";\r\nimport App from './App';\r\nimport NotFound from './NotFound';\r\n\r\n//now we build a Stateless Functional Component\r\nconst Router = ()=>(\r\n    <BrowserRouter>\r\n<Switch>\r\n    <Route exact path=\"/\" component={StorePicker}/>\r\n<Route path=\"/store/:storeId\" component={App}/> {/**this path is basically wesbos.com/store/*anystorename* */}\r\n     <Route component={NotFound}/>\r\n</Switch>\r\n    </BrowserRouter>\r\n\r\n)\r\n\r\n/**NOTES ABOUT ABOVE: the Route path \"/\" is basically the homepage - ie. cathoftheday.wesbos.com/\r\n * this renders out the Store Picker component. The next Route renders out the App.js component\r\n */\r\nexport default Router; //DON'T FORGET THIS!!!","import React from 'react'; //this is imported from the npm modules installation we did\r\n/**now we will create a component. EVERY component we use is it's own 'class'.\r\n * Each class needs at least ONE method within its {}s, and this is called a 'Render'.\r\n * This determines what elements are rendered out to the html page\r\n */\r\nimport {render} from 'react-dom'; /**we need to import this so we can render data to the html page */\r\nimport StorePicker from './components/StorePicker'; //this imports the required Component, DO NOT NEED '.js'\r\nimport App from './components/App'\r\nimport Router from './components/Router'\r\n\r\nimport './css/style.css'; //this is where we import CSS file\r\n\r\n/**class StorePicker extends React.Component {\r\n\r\n    render() {\r\n        return <p>hello</p>\r\n    }\r\n} */\r\n\r\n//WE SAVE EACH CLASS COMPONENT IN A SEPARATE FILE. See StorePicker.js in src/components\r\n\r\n\r\nrender(<Router />, document.querySelector(\"#main\"));//note the self-closing\r\n/**note about the above render menthod:\r\n * creating the component \"StorePicker\" allows it to be used as a tag argument in the render method, along\r\n * with the element which we would like the component to be rendered to.\r\n  */"],"sourceRoot":""}