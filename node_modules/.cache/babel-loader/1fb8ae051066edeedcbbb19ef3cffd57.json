{"ast":null,"code":"import _objectSpread from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Owner\\\\React-For-Beginners-Starter-Files-master\\\\React-For-Beginners-Starter-Files-master\\\\catch-of-the-day\\\\src\\\\components\\\\EditFishForm.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { object } from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar EditFishForm = /*#__PURE__*/function (_React$Component) {\n  _inherits(EditFishForm, _React$Component);\n\n  var _super = _createSuper(EditFishForm);\n\n  function EditFishForm() {\n    var _this;\n\n    _classCallCheck(this, EditFishForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.handleChange = function (event) {\n      //user enters some data in the fields\n      console.log(event.currentTarget.name); //update that fish\n      //1. take a copy of the current fish\n\n      var updatedFish = _objectSpread(_objectSpread({}, _this.props.fish), {}, {\n        //overwrite the value that is currently in state for whatever the user entered\n        [event.currentTarget.name]: event.currentTarget.value //user-input value\n\n      });\n\n      _this.props.updateFish(_this.props.index, updatedFish); //update fish and send data upstream to App.js\n\n    };\n\n    return _this;\n  }\n\n  _createClass(EditFishForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fish-edit\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          onChange: this.handleChange,\n          value: this.props.fish.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"price\",\n          onChange: this.handleChange,\n          value: this.props.fish.price\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          type: \"text\",\n          name: \"status\",\n          onChange: this.handleChange,\n          value: this.props.fish.status,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"available\",\n            children: \"Fresh!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"unavailable\",\n            children: \"Sold Out!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          type: \"text\",\n          name: \"desc\",\n          onChange: this.handleChange,\n          value: this.props.fish.desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"image\",\n          onChange: this.handleChange,\n          value: this.props.fish.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: function onClick() {\n            return _this2.props.deleteFish(_this2.props.index);\n          },\n          children: \"Remove Fish\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return EditFishForm;\n}(React.Component);\n\nEditFishForm.propTypes = {\n  fish: PropTypes.shape({\n    image: PropTypes.string,\n    name: PropTypes.string,\n    desc: PropTypes.string,\n    status: PropTypes.string,\n    price: PropTypes.number\n  }),\n  index: PropTypes.string,\n  updateFish: PropTypes.func\n};\nexport default EditFishForm;\n/**NOTE--- DOING this: <input type=\"text\" name=\"name\" value={this.props.fish.name} /> \r\n * \r\n * means that STATE now exists in TWO places - App.js, and above. This is because we passed state down to \r\n * EditFishForm and React throws an error when trying to update state in two places like that. State \r\n * should only be accessed/changed in the App component. To overcome this, we code an 'onChange' event. \r\n*/","map":{"version":3,"sources":["C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/src/components/EditFishForm.js"],"names":["React","PropTypes","object","EditFishForm","handleChange","event","console","log","currentTarget","name","updatedFish","props","fish","value","updateFish","index","price","status","desc","image","deleteFish","Component","propTypes","shape","string","number","func"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { object } from 'prop-types';\r\n\r\nclass EditFishForm extends React.Component{\r\n\r\n    static propTypes ={\r\n        fish: PropTypes.shape({\r\n            image: PropTypes.string,\r\n            name: PropTypes.string,\r\n            desc: PropTypes.string,\r\n            status: PropTypes.string,\r\n            price: PropTypes.number\r\n        }),\r\n        index: PropTypes.string,\r\n        updateFish: PropTypes.func,\r\n    }\r\n\r\nhandleChange = (event) =>{//user enters some data in the fields\r\nconsole.log(event.currentTarget.name); \r\n//update that fish\r\n//1. take a copy of the current fish\r\nconst updatedFish = {\r\n    ...this.props.fish,\r\n    //overwrite the value that is currently in state for whatever the user entered\r\n    [event.currentTarget.name]: event.currentTarget.value //user-input value\r\n};\r\nthis.props.updateFish(this.props.index, updatedFish);//update fish and send data upstream to App.js\r\n\r\n};\r\n    render() {\r\n        return (\r\n            <div className='fish-edit'>\r\n            {/**Here, our inputs have values set to the STATE values, in App.js. If a change is made\r\n            the onChange method kicks in, but react prevents any changes to STATE. See above */}\r\n            <input type=\"text\" name=\"name\" onChange={this.handleChange} value={this.props.fish.name} />\r\n            <input type=\"text\" name=\"price\" onChange={this.handleChange} value={this.props.fish.price} />\r\n            <select type=\"text\" name=\"status\" onChange={this.handleChange} value={this.props.fish.status}>\r\n                <option value=\"available\">Fresh!</option>\r\n                <option value=\"unavailable\">Sold Out!</option>\r\n            </select>\r\n            <textarea type=\"text\" name=\"desc\" onChange={this.handleChange} value={this.props.fish.desc} />\r\n            <input type=\"text\" name=\"image\" onChange={this.handleChange} value={this.props.fish.image} />\r\n\r\n            <button onClick={()=>this.props.deleteFish(this.props.index)}>Remove Fish</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default EditFishForm;\r\n/**NOTE--- DOING this: <input type=\"text\" name=\"name\" value={this.props.fish.name} /> \r\n * \r\n * means that STATE now exists in TWO places - App.js, and above. This is because we passed state down to \r\n * EditFishForm and React throws an error when trying to update state in two places like that. State \r\n * should only be accessed/changed in the App component. To overcome this, we code an 'onChange' event. \r\n*/"]},"metadata":{},"sourceType":"module"}