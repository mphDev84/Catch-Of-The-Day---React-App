{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import firebase from'firebase';import AddFishForm from'./AddFishForm';import EditFishForm from'./EditFishForm';import Login from'./Login';import base,{firebaseApp}from'../base';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Inventory=/*#__PURE__*/function(_React$Component){_inherits(Inventory,_React$Component);var _super=_createSuper(Inventory);function Inventory(){var _this;_classCallCheck(this,Inventory);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={uid:null,owner:null};_this.authHandler=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(authData){var store;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return base.fetch(_this.props.storeId,{context:_assertThisInitialized(_this)});case 2:store=_context.sent;//we put await infront so that the store is in the variable, not the promise from the fetch() function\nconsole.log(store);//outputs all the fishes in that particular store\n//2. Claim it if there is no onwer\nif(store.owner){_context.next=7;break;}_context.next=7;return base.post(\"\".concat(_this.props.storeId,\"/owner\"),{data:authData.user.uid//go to Dev tools and branch out the auth data of the user who signed in -- uid is a unique identifier for that user\n});case 7:;//3. Set state of inventory to reflect current user\n//the below code will figure out whether the user signed in is the owner, or someone else.\n//note, we are accessing state outside of App.js, but is ok since it is localized to Inventory.js\n_this.setState({uid:authData.user.uid,owner:store.owner||authData.user.uid});console.log(authData);case 10:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();_this.authenticate=function(provider){var authProvider=new firebase.auth[\"\".concat(provider,\"AuthProvider\")]();//essentially .authFacebookauthProvider etc\nfirebaseApp.auth().signInWithPopup(authProvider).then(_this.authHandler);//data is passed to authHandler after user login\n};_this.logout=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:console.log(\"logging out!\");_context2.next=3;return firebase.auth().signOut();case 3:_this.setState({uid:null});case 4:case\"end\":return _context2.stop();}}},_callee2);}));return _this;}_createClass(Inventory,[{key:\"componentDidMount\",value:/**we want to listen for componentDidMount so that the program can check whether we are still logged\r\n     * in if the page is refreshed:\r\n     */function componentDidMount(){var _this2=this;firebase.auth().onAuthStateChanged(function(user){if(user){_this2.authHandler({user});//pass the logged in user to out authHandler()\n};});}},{key:\"render\",value:function render(){var _this3=this;//HERE IS THE LOGOUT BUTTON--------------------------------------\nvar logout=/*#__PURE__*/_jsx(\"button\",{onClick:this.logout,children:\"Log Out!\"});//check if they are logged in\nif(!this.state.uid){//basically, if no one is logged on\nreturn/*#__PURE__*/_jsx(Login,{authenticate:this.authenticate});};//check if they are not the owner of the store\nif(this.state.uid!==this.state.owner){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"Sorry, you are not the owner of the store!\"}),logout]});}/*i.e. if no user is logged on, the login section is rendered, user logs in, the code checks if the \r\n        user is the owner of that store page. If yes, the inventory is rendered*/return/*#__PURE__*/_jsxs(\"div\",{className:\"inventory\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Inventory\"}),logout,Object.keys(this.props.fishes).map(function(key){return/*#__PURE__*/_jsx(EditFishForm,{index:key,fish:_this3.props.fishes[key],updateFish:_this3.props.updateFish,deleteFish:_this3.props.deleteFish},key);}),/*#__PURE__*/_jsx(AddFishForm,{addFish:this.props.addFish}),/*#__PURE__*/_jsx(\"button\",{onClick:this.props.loadSampleFishes,children:\"Load Sample Fishes\"})]});}}]);return Inventory;}(React.Component);export default Inventory;","map":{"version":3,"sources":["C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/src/components/Inventory.js"],"names":["React","firebase","AddFishForm","EditFishForm","Login","base","firebaseApp","Inventory","state","uid","owner","authHandler","authData","fetch","props","storeId","context","store","console","log","post","data","user","setState","authenticate","provider","authProvider","auth","signInWithPopup","then","logout","signOut","onAuthStateChanged","Object","keys","fishes","map","key","updateFish","deleteFish","addFish","loadSampleFishes","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport firebase from 'firebase';\r\nimport AddFishForm from './AddFishForm';\r\nimport EditFishForm from './EditFishForm';\r\nimport Login from './Login';\r\nimport base, { firebaseApp } from '../base';\r\n\r\nclass Inventory extends React.Component{\r\n\r\n    static propTypes ={\r\n        fishes: PropTypes.shape({\r\n            image: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            desc: PropTypes.string.isRequired,\r\n            status: PropTypes.string.isRequired,\r\n            price: PropTypes.number.isRequired\r\n        }),\r\n        updateFish: PropTypes.func.isRequired,\r\n        deleteFish: PropTypes.func.isRequired,\r\n        loadSampleFishes: PropTypes.func.isRequired\r\n    };\r\n\r\n    state={\r\n        uid:null,\r\n        owner:null\r\n    };\r\n\r\n    /**we want to listen for componentDidMount so that the program can check whether we are still logged\r\n     * in if the page is refreshed:\r\n     */\r\n    componentDidMount(){\r\n        firebase.auth().onAuthStateChanged(user=>{\r\n            if(user){\r\n                this.authHandler({user});//pass the logged in user to out authHandler()\r\n            };\r\n        });\r\n    };\r\n\r\n    authHandler= async (authData)=>{\r\n        //1. Look up the current store in firebase DB\r\n    const store = await base.fetch(this.props.storeId, {context:this}); //we put await infront so that the store is in the variable, not the promise from the fetch() function\r\n    console.log(store)//outputs all the fishes in that particular store\r\n        //2. Claim it if there is no onwer\r\n        if(!store.owner){\r\n            //save it as our own - i.e. push to firebase\r\n            await base.post(`${this.props.storeId}/owner`, {\r\n                data: authData.user.uid //go to Dev tools and branch out the auth data of the user who signed in -- uid is a unique identifier for that user\r\n            });\r\n        };\r\n        //3. Set state of inventory to reflect current user\r\n        //the below code will figure out whether the user signed in is the owner, or someone else.\r\n        //note, we are accessing state outside of App.js, but is ok since it is localized to Inventory.js\r\n        this.setState({\r\n            uid: authData.user.uid,\r\n            owner: store.owner || authData.user.uid\r\n        });\r\n    console.log(authData)\r\n    };\r\n\r\n    authenticate=provider=>{\r\n        const authProvider = new firebase.auth[`${provider}AuthProvider`]();//essentially .authFacebookauthProvider etc\r\n        firebaseApp\r\n        .auth()\r\n        .signInWithPopup(authProvider)\r\n        .then(this.authHandler);//data is passed to authHandler after user login\r\n    };\r\n\r\n    logout = async() =>{\r\n        console.log(\"logging out!\"),\r\n        await firebase.auth().signOut();\r\n        this.setState({ uid:null });\r\n    };\r\n\r\n    render() {\r\n\r\n        //HERE IS THE LOGOUT BUTTON--------------------------------------\r\n        const logout = <button onClick={this.logout}>Log Out!</button>\r\n\r\n        //check if they are logged in\r\n        if(!this.state.uid){//basically, if no one is logged on\r\n        return <Login authenticate={this.authenticate} />\r\n        };\r\n        //check if they are not the owner of the store\r\n        if(this.state.uid !== this.state.owner){\r\n            return <div>\r\n                <p>Sorry, you are not the owner of the store!</p>\r\n                {logout}{/**here is out logout button, and below also */}\r\n            </div>\r\n        }\r\n\r\n        /*i.e. if no user is logged on, the login section is rendered, user logs in, the code checks if the \r\n        user is the owner of that store page. If yes, the inventory is rendered*/\r\n        return (\r\n\r\n            <div className =\"inventory\">\r\n                <h2>Inventory</h2>\r\n                {logout}\r\n                {Object.keys(this.props.fishes).map(key=> \r\n                <EditFishForm \r\n                key={key} \r\n                index={key}\r\n                fish={this.props.fishes[key]} \r\n                updateFish={this.props.updateFish}\r\n                deleteFish={this.props.deleteFish}    \r\n                />)}\r\n                <AddFishForm addFish={this.props.addFish} /> \r\n            <button onClick={this.props.loadSampleFishes}>Load Sample Fishes</button>\r\n            \r\n            {/**Note about above-addFish is being passed down from parent app.js. It was first passed\r\n            to Inventory in App.js (line 29), adding it to Inventory's 'props'. Now it is passed down\r\n            again to addFishForm, but we must include props in the call. */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Inventory;"]},"metadata":{},"sourceType":"module"}