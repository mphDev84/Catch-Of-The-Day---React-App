{"ast":null,"code":"import _classCallCheck from\"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';//always need to do this\nimport{getFunName}from'../helpers';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StorePicker=/*#__PURE__*/function(_React$Component){_inherits(StorePicker,_React$Component);var _super=_createSuper(StorePicker);function StorePicker(){var _this;_classCallCheck(this,StorePicker);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.myInput=/*#__PURE__*/React.createRef();_this.goToStore=function(event){//arrow function binds the methods much like using the constructor as seen at bottom\nevent.preventDefault();//this method prevents the HTML form from submitting each time the submit button is pressed \nvar storeName=_this.myInput.current.value;//can now access \"this\" instance, taking user input value\n_this.props.history.push(\"/store/\".concat(storeName));//push to the next page based on user input!\n//notice this path to push() above, this comes from looking at props on chrome dev tools\n};return _this;}_createClass(StorePicker,[{key:\"render\",value:function render(){/* return React.createElement('p', {className: \"hey\"}, \"this is a sentence\");\r\n        above code is a way to create HTML elements in JS using React. Notice the use of\r\n        'className' to assign a class to the element.*/return/*#__PURE__*/ (//note, we cannot add sibling elements (separate from other elements) such as:\n//<p>Hello</p>\n//we can, however, do the following to overcome this limitation:\n//we wrap in a React Fragment:\n_jsx(React.Fragment,{children:/*#__PURE__*/_jsxs(\"form\",{className:\"store-selector\",onSubmit:this.goToStore,children:[\" \",/*#__PURE__*/_jsx(\"h2\",{children:\"Please enter a store\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",ref:this.myInput//surfaces the input on the component so we can grab it\n,required:true,placeholder:\"Enter a store name\",defaultValue:getFunName()}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Visit Store->\"})]})}));}}]);return StorePicker;}(React.Component);/**Note the use of brackets in the snippet 'return (code...)' -- the html is run before the final data\r\n * is returned. Note, 'return()' would not work as return is not a function. We need the space after return:\r\n * 'return ()' * \r\n */export default StorePicker;//export sausage!\n/**NOTES ABOUt ABOVE:: -- The below is a less efficient way of doing the above when accessing \"this\"\r\n * \r\n * class StorePicker extends React.Component {//make your sausage :)\r\n\r\nconstructor(){//this will run before StorePicker component is created\r\n    super();//runs the 'extends' part of the component above, calls those methods\r\n    console.log(\"gonna create a component\");\r\n    this.goToStore = this.goToStore.bind(this);\r\n    //the above 'binding' method is required for us to be able to access the 'this' instance of StorePicker\r\n}\r\n\r\nmyInput = React.createRef();//we've just created an empty 'ref' for the form that we can use to touch DOM\r\n\r\ngoToStore(event){\r\nevent.preventDefault();//this method prevents the HTML form from submitting each time the submit button is pressed \r\nconsole.log(this)//can now access due to binding!\r\n}\r\n */","map":{"version":3,"sources":["C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/src/components/StorePicker.js"],"names":["React","getFunName","StorePicker","myInput","createRef","goToStore","event","preventDefault","storeName","current","value","props","history","push","Component"],"mappings":"g5BAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAA0B;AAE1B,OAAQC,UAAR,KAAyB,YAAzB,C,2FAEMC,CAAAA,W,2VAMNC,O,cAAUH,KAAK,CAACI,SAAN,E,OAEVC,S,CAAW,SAACC,KAAD,CAAS,CAAC;AACrBA,KAAK,CAACC,cAAN,GAAuB;AACvB,GAAMC,CAAAA,SAAS,CAAG,MAAKL,OAAL,CAAaM,OAAb,CAAqBC,KAAvC,CAA6C;AAE7C,MAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,kBAAkCL,SAAlC,GAA+C;AAC/C;AAEC,C,6DACG,iBAAS,CAEN;AACP;AACA,uDACQ,oBACA;AACA;AACA;AACA;AAEA,KAAC,KAAD,CAAO,QAAP,wBAEA,cAAM,SAAS,CAAC,gBAAhB,CAAiC,QAAQ,CAAE,KAAKH,SAAhD,4BACI,4CADJ,cAEI,cACA,IAAI,CAAC,MADL,CAEA,GAAG,CAAE,KAAKF,OAAQ;AAFlB,CAGA,QAAQ,KAHR,CAIA,WAAW,CAAC,oBAJZ,CAKA,YAAY,CAAEF,UAAU,EALxB,EAFJ,cAUI,eAAQ,IAAI,CAAC,QAAb,2BAVJ,GAFA,EANA,EAsBH,C,yBA3CqBD,KAAK,CAACc,S,EA8ChC;AACA;AACA;AACA,GACA,cAAeZ,CAAAA,WAAf,CAA2B;AAK3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';//always need to do this\r\nimport PropTypes from 'prop-types';\r\nimport {getFunName} from '../helpers';\r\n\r\nclass StorePicker extends React.Component {//make your sausage :)\r\n\r\n    static propTypes = {\r\n        history: PropTypes.object\r\n    };\r\n\r\nmyInput = React.createRef();//we've just created an empty 'ref' for the form that we can use to touch DOM\r\n\r\ngoToStore =(event)=>{//arrow function binds the methods much like using the constructor as seen at bottom\r\nevent.preventDefault();//this method prevents the HTML form from submitting each time the submit button is pressed \r\nconst storeName = this.myInput.current.value;//can now access \"this\" instance, taking user input value\r\n\r\nthis.props.history.push(`/store/${storeName}`);//push to the next page based on user input!\r\n//notice this path to push() above, this comes from looking at props on chrome dev tools\r\n\r\n}\r\n    render() {\r\n\r\n       /* return React.createElement('p', {className: \"hey\"}, \"this is a sentence\");\r\n        above code is a way to create HTML elements in JS using React. Notice the use of\r\n        'className' to assign a class to the element.*/\r\n        return (\r\n        //note, we cannot add sibling elements (separate from other elements) such as:\r\n        //<p>Hello</p>\r\n        //we can, however, do the following to overcome this limitation:\r\n        //we wrap in a React Fragment:\r\n\r\n        <React.Fragment>\r\n    \r\n        <form className=\"store-selector\" onSubmit={this.goToStore}> {/**method to visit store page */}\r\n            <h2>Please enter a store</h2>\r\n            <input \r\n            type=\"text\" \r\n            ref={this.myInput}//surfaces the input on the component so we can grab it\r\n            required \r\n            placeholder='Enter a store name' \r\n            defaultValue={getFunName()}  \r\n            />\r\n\r\n            <button type=\"submit\">{`Visit Store->`}</button>\r\n        </form>\r\n        </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n/**Note the use of brackets in the snippet 'return (code...)' -- the html is run before the final data\r\n * is returned. Note, 'return()' would not work as return is not a function. We need the space after return:\r\n * 'return ()' * \r\n */\r\nexport default StorePicker;//export sausage!\r\n\r\n\r\n\r\n\r\n/**NOTES ABOUt ABOVE:: -- The below is a less efficient way of doing the above when accessing \"this\"\r\n * \r\n * class StorePicker extends React.Component {//make your sausage :)\r\n\r\nconstructor(){//this will run before StorePicker component is created\r\n    super();//runs the 'extends' part of the component above, calls those methods\r\n    console.log(\"gonna create a component\");\r\n    this.goToStore = this.goToStore.bind(this);\r\n    //the above 'binding' method is required for us to be able to access the 'this' instance of StorePicker\r\n}\r\n\r\nmyInput = React.createRef();//we've just created an empty 'ref' for the form that we can use to touch DOM\r\n\r\ngoToStore(event){\r\nevent.preventDefault();//this method prevents the HTML form from submitting each time the submit button is pressed \r\nconsole.log(this)//can now access due to binding!\r\n}\r\n */"]},"metadata":{},"sourceType":"module"}