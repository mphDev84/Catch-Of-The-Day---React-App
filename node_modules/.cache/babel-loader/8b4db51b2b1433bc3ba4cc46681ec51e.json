{"ast":null,"code":"import React from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";//separate package from React - there are other ways too, FB's Flow etc \n/**The below code utilizes an arrow function syntax to code a header component. It is called\r\n * a STATELESS FUNCTIONAL COMPONENT Note the difference between this and the further code below. Where\r\n * '({tagline, age})' is used, we can also write ({props}), and then write '{props.tagline}' below etc.\r\n * WE USE THESE STATELESS COMPONENTS when it is just a component that received some prop data and spits\r\n * it back out. Saves a little on efficiency. We still need to write components the other way if they do \r\n * more than this.\r\n */var Header=function Header(_ref){var tagline=_ref.tagline,age=_ref.age;return/*#__PURE__*/ (//destructuring the props gives us these two variables to use\n_jsxs(\"header\",{className:\"top\",children:[/*#__PURE__*/_jsxs(\"h1\",{children:[\"Catch\",/*#__PURE__*/_jsxs(\"span\",{className:\"ofThe\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"of\",children:\"Of\"}),/*#__PURE__*/_jsx(\"span\",{className:\"the\",children:\"The\"})]}),\"Day\"]}),/*#__PURE__*/_jsx(\"h3\",{className:\"tagline\",children:/*#__PURE__*/_jsx(\"span\",{children:tagline})})]}));};//this code below basically checks that the data being passed via props as 'tagline' is a string.\n//this is prop data-validation for STATELESS FUNCTIONAL COMPONENTS like the above. See Fish.js for \n//info on how to code STATIC prop types\n/** \r\nclass Header extends React.Component{\r\n    render() {\r\n        return (\r\n\r\n        <React.Fragment>\r\n        <header className=\"top\">\r\n            <h1>\r\n            Catch \r\n            <span className=\"ofThe\">\r\n                <span className =\"of\">Of</span>\r\n                <span className=\"the\">The</span>\r\n            </span>\r\n            Day\r\n            </h1>\r\n            <h3 className=\"tagline\">\r\n            <span>{this.props.tagline}</span>{/**we want to make this DYNAMIC so we can change at any time, \r\n                                            see App.js */ ///}\n/*    </h3>\r\n    </header>\r\n    </React.Fragment>\r\n\r\n        )\r\n    }\r\n}\r\n*/export default Header;/**NOTES: Looking at the code above (and App.js), we can see that we gave some data in object form\r\n * to the header element (tagline, age and our own made-up prop, cool). This data can be accessed in the \r\n * Header.js file as you can see above. We need {}s since we revert to JS to call this data.\r\n * \r\n * NOTE about '$r' - use this in dev tools, when a component is selected, go to the console and type in $r.\r\n * this will return all the info (props, state etc) regarding this selected react component (or any element). \r\n * '$0' can be used in the same way for regular HTML elements.\r\n */","map":{"version":3,"sources":["C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/src/components/Header.js"],"names":["React","Header","tagline","age"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,wFACmC;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA,GACA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,UAAEC,CAAAA,OAAF,MAAEA,OAAF,CAAWC,GAAX,MAAWA,GAAX,qBAAqB;AAC5B,gBAAQ,SAAS,CAAC,KAAlB,wBACI,2CAEA,cAAM,SAAS,CAAC,OAAhB,wBACI,aAAM,SAAS,CAAE,IAAjB,gBADJ,cAEI,aAAM,SAAS,CAAC,KAAhB,iBAFJ,GAFA,SADJ,cASI,WAAI,SAAS,CAAC,SAAd,uBACA,sBAAOD,OAAP,EADA,EATJ,GADO,GAAf,CAiBI;AACA;AACA;AAQJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yD,CAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAEA,cAAeD,CAAAA,MAAf,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\r\nimport PropTypes from \"prop-types\";//separate package from React - there are other ways too, FB's Flow etc \r\n\r\n/**The below code utilizes an arrow function syntax to code a header component. It is called\r\n * a STATELESS FUNCTIONAL COMPONENT Note the difference between this and the further code below. Where\r\n * '({tagline, age})' is used, we can also write ({props}), and then write '{props.tagline}' below etc.\r\n * WE USE THESE STATELESS COMPONENTS when it is just a component that received some prop data and spits\r\n * it back out. Saves a little on efficiency. We still need to write components the other way if they do \r\n * more than this.\r\n */\r\nconst Header = ({tagline, age})=> ( //destructuring the props gives us these two variables to use\r\n        <header className=\"top\">\r\n            <h1>\r\n            Catch \r\n            <span className=\"ofThe\">\r\n                <span className =\"of\">Of</span>\r\n                <span className=\"the\">The</span>\r\n            </span>\r\n            Day\r\n            </h1>\r\n            <h3 className=\"tagline\">\r\n            <span>{tagline}</span>{/**we want to make this DYNAMIC so we can change at any time, \r\n                                            see App.js */}\r\n    </h3>\r\n    </header>\r\n    );\r\n\r\n    //this code below basically checks that the data being passed via props as 'tagline' is a string.\r\n    //this is prop data-validation for STATELESS FUNCTIONAL COMPONENTS like the above. See Fish.js for \r\n    //info on how to code STATIC prop types\r\nHeader.propTypes ={\r\n    tagline: PropTypes.string.isRequired\r\n};\r\n\r\n\r\n\r\n\r\n/** \r\nclass Header extends React.Component{\r\n    render() {\r\n        return (\r\n\r\n        <React.Fragment>\r\n        <header className=\"top\">\r\n            <h1>\r\n            Catch \r\n            <span className=\"ofThe\">\r\n                <span className =\"of\">Of</span>\r\n                <span className=\"the\">The</span>\r\n            </span>\r\n            Day\r\n            </h1>\r\n            <h3 className=\"tagline\">\r\n            <span>{this.props.tagline}</span>{/**we want to make this DYNAMIC so we can change at any time, \r\n                                            see App.js *////}\r\n/*    </h3>\r\n    </header>\r\n    </React.Fragment>\r\n\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\nexport default Header;\r\n/**NOTES: Looking at the code above (and App.js), we can see that we gave some data in object form\r\n * to the header element (tagline, age and our own made-up prop, cool). This data can be accessed in the \r\n * Header.js file as you can see above. We need {}s since we revert to JS to call this data.\r\n * \r\n * NOTE about '$r' - use this in dev tools, when a component is selected, go to the console and type in $r.\r\n * this will return all the info (props, state etc) regarding this selected react component (or any element). \r\n * '$0' can be used in the same way for regular HTML elements.\r\n */"]},"metadata":{},"sourceType":"module"}