{"ast":null,"code":"import _classCallCheck from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Owner\\\\React-For-Beginners-Starter-Files-master\\\\React-For-Beginners-Starter-Files-master\\\\catch-of-the-day\\\\src\\\\components\\\\StorePicker.js\";\nimport React from 'react'; //always need to do this\n\nimport { getFunName } from '../helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar StorePicker = /*#__PURE__*/function (_React$Component) {\n  _inherits(StorePicker, _React$Component);\n\n  var _super = _createSuper(StorePicker);\n\n  //make your sausage :)\n  function StorePicker() {\n    var _this;\n\n    _classCallCheck(this, StorePicker);\n\n    //this will run before StorePicker component is created\n    _this = _super.call(this); //runs the 'extends' part of the component above, calls those methods\n\n    _this.myInput = /*#__PURE__*/React.createRef();\n    console.log(\"gonna create a component\");\n    return _this;\n  }\n\n  _createClass(StorePicker, [{\n    key: \"goToStore\",\n    value: //we've just created an empty 'ref' for the form that we can use to touch DOM\n    function goToStore(event) {\n      event.preventDefault(); //this method prevents the HTML form from submitting each time the submit button is pressed \n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      /* return React.createElement('p', {className: \"hey\"}, \"this is a sentence\");\r\n       above code is a way to create HTML elements in JS using React. Notice the use of\r\n       'className' to assign a class to the element.*/\n      return (\n        /*#__PURE__*/\n        //note, we cannot add sibling elements (separate from other elements) such as:\n        //<p>Hello</p>\n        //we can, however, do the following to overcome this limitation:\n        //we wrap in a React Fragment:\n        _jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"store-selector\",\n            onSubmit: this.goToStore,\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Please enter a store\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              ref: this.myInput //surfaces the input on the component so we can grab it\n              ,\n              required: true,\n              placeholder: \"Enter a store name\",\n              defaultValue: getFunName()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Visit Store->\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }, this)\n      );\n    }\n  }]);\n\n  return StorePicker;\n}(React.Component);\n/**Note the use of brackets in the snippet 'return (code...)' -- the html is run before the final data\r\n * is returned. Note, 'return()' would not work as return is not a function. We need the space after return:\r\n * 'return ()' * \r\n */\n\n\nexport default StorePicker; //export sausage!","map":{"version":3,"sources":["C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/src/components/StorePicker.js"],"names":["React","getFunName","StorePicker","myInput","createRef","console","log","event","preventDefault","goToStore","Component"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAA0B;;AAC1B,SAAQC,UAAR,QAAyB,YAAzB;;;IAEMC,W;;;;;AAAqC;AAE3C,yBAAa;AAAA;;AAAA;;AAAC;AACV,8BADS,CACD;;AADC,UAKbC,OALa,gBAKHH,KAAK,CAACI,SAAN,EALG;AAETC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AAFS;AAGZ;;;;WAE2B;AAE5B,uBAAUC,KAAV,EAAgB;AAChBA,MAAAA,KAAK,CAACC,cAAN,GADgB,CACO;AAEtB;;;WACG,kBAAS;AAEN;AACP;AACA;AACQ;AAAA;AACA;AACA;AACA;AACA;AAEA,gBAAC,KAAD,CAAO,QAAP;AAAA,iCAEA;AAAM,YAAA,SAAS,EAAC,gBAAhB;AAAiC,YAAA,QAAQ,EAAE,KAAKC,SAAhD;AAAA,yCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AACA,cAAA,IAAI,EAAC,MADL;AAEA,cAAA,GAAG,EAAE,KAAKN,OAFV,CAEkB;AAFlB;AAGA,cAAA,QAAQ,MAHR;AAIA,cAAA,WAAW,EAAC,oBAJZ;AAKA,cAAA,YAAY,EAAEF,UAAU;AALxB;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAUI;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AANA;AAsBH;;;;EAxCqBD,KAAK,CAACU,S;AA2ChC;AACA;AACA;AACA;;;AACA,eAAeR,WAAf,C,CAA2B","sourcesContent":["import React from 'react';//always need to do this\r\nimport {getFunName} from '../helpers';\r\n\r\nclass StorePicker extends React.Component {//make your sausage :)\r\n\r\nconstructor(){//this will run before StorePicker component is created\r\n    super();//runs the 'extends' part of the component above, calls those methods\r\n    console.log(\"gonna create a component\");\r\n}\r\n\r\nmyInput = React.createRef();//we've just created an empty 'ref' for the form that we can use to touch DOM\r\n\r\ngoToStore(event){\r\nevent.preventDefault();//this method prevents the HTML form from submitting each time the submit button is pressed \r\n\r\n}\r\n    render() {\r\n\r\n       /* return React.createElement('p', {className: \"hey\"}, \"this is a sentence\");\r\n        above code is a way to create HTML elements in JS using React. Notice the use of\r\n        'className' to assign a class to the element.*/\r\n        return (\r\n        //note, we cannot add sibling elements (separate from other elements) such as:\r\n        //<p>Hello</p>\r\n        //we can, however, do the following to overcome this limitation:\r\n        //we wrap in a React Fragment:\r\n\r\n        <React.Fragment>\r\n    \r\n        <form className=\"store-selector\" onSubmit={this.goToStore}> {/**method to visit store page */}\r\n            <h2>Please enter a store</h2>\r\n            <input \r\n            type=\"text\" \r\n            ref={this.myInput}//surfaces the input on the component so we can grab it\r\n            required \r\n            placeholder='Enter a store name' \r\n            defaultValue={getFunName()}  \r\n            />\r\n\r\n            <button type=\"submit\">{`Visit Store->`}</button>\r\n        </form>\r\n        </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n/**Note the use of brackets in the snippet 'return (code...)' -- the html is run before the final data\r\n * is returned. Note, 'return()' would not work as return is not a function. We need the space after return:\r\n * 'return ()' * \r\n */\r\nexport default StorePicker;//export sausage!"]},"metadata":{},"sourceType":"module"}