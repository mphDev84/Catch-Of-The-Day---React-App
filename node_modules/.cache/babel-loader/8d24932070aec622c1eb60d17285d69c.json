{"ast":null,"code":"import _objectSpread from\"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';//first thing we need!\nimport Header from'./Header';//import here instead of index.js, as it is only needed here\nimport Order from'./Order';import Inventory from'./Inventory';import sampleFishes from'../sample-fishes';import Fish from'./Fish';import base from\"../base\";//so we can mirror to DB\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=/*#__PURE__*/function(_React$Component){_inherits(App,_React$Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={fishes:{},order:{}};_this.addFish=function(fish){//1-take a copy of exisiting state - we don't want to modify it directly\nvar fishes=_objectSpread({},_this.state.fishes);//use spread\n//2-add new fish to fishes variable/object- using date.now here gives a unique value to each fish\nfishes[\"fish\".concat(Date.now())]=fish;//this 'fish' is taken from addFishForm.js data, i.e user input\n//3 - set new fishes object to state\n_this.setState({fishes:fishes//can also say just 'fishes'. Also, note we are updating a PIECE of state (no 'order' yet)\n});//the above setState call basically overrides the initially set state above (line 11), populates with data;\n};_this.updateFish=function(key,updatedFish){//take a copy of the current state\nvar fishes=_objectSpread({},_this.state.fishes);//update that state\nfishes[key]=updatedFish;//set to state\n_this.setState({fishes:fishes});};_this.deleteFish=function(key){//take a copy of state\nvar fishes=_objectSpread({},_this.state.fishes);//update state\nfishes[key]=null;//update state\n_this.setState({fishes:fishes});};_this.loadSampleFishes=function(){_this.setState({fishes:sampleFishes});};_this.addToOrder=function(key){//we need to be able to use and access 'key', but we can't without passing it as a prop\n//1.Take a copy of state:\nvar order=_objectSpread({},_this.state.order);//2.add to order/update number in order\norder[key]=order[key]+1||1;// increments count of whatever fish is in order\n//3. call setState to update order state\n_this.setState({order:order});};_this.removeFromOrder=function(key){//1.Take a copy of state:\nvar order=_objectSpread({},_this.state.order);//2.remove this item from order\ndelete order[key];// increments count of whatever fish is in order. We can use delete because no Firebase here, we use local storage\n//3. call setState to update order state\n_this.setState({order:order});};return _this;}_createClass(App,[{key:\"componentDidMount\",value://now we need to sync with the DB:\nfunction componentDidMount(){var params=this.props.match.params;//check path on dev tools!\n//WE MUST re-instate local storage here, otherwise it is overwritten when page refreshes\nvar localStorageRef=localStorage.getItem(params.storeId);if(localStorageRef){this.setState({order:JSON.parse(localStorageRef)});}//we do '/fishes' to get to the fishes object which we need to mirror to the DB\nthis.ref=base.syncState(\"\".concat(params.storeId,\"/fishes\"),{context:this,state:'fishes'});}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){console.log(\"updated\");localStorage.setItem(this.props.match.params.storeId,JSON.stringify(this.state.order));//above has two args - the key name (store Id), and the state/item/key value we want to store\n//check above path on Dev Tools! state.order is an object, so we must use stringify to extract the data\nconsole.log(this.state);}//this method unmounts the app when user back-pages out of current state/DB mirror\n},{key:\"componentWillUnmount\",value:function componentWillUnmount(){base.removeBinding(this.ref);}},{key:\"render\",value://NOTE = ALL METHODS/DATA is passed to components via PROPS\n//REMEMBER TO MANUALLY CHECK METHODS in dev tools, using '$r.${methodName(\"whatever args\")}'\nfunction render(){var _this2=this;return/*#__PURE__*/_jsxs(\"div\",{className:\"catch-of-the-day\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"menu\",children:[/*#__PURE__*/_jsx(Header,{tagline:\"Fresh Seafood Market\",age:500,cool:\"true\"}),/*#__PURE__*/_jsxs(\"ul\",{className:\"fishes\",children:[Object.keys(this.state.fishes).map(function(key){return/*#__PURE__*/_jsx(Fish,{index:key//this allows us to pass the 'key' as a prop, otherwise we have no access. DEV TOOLS\n,details:_this2.state.fishes[key],addToOrder:_this2.addToOrder},key);}),\" \"]})]}),/*#__PURE__*/_jsx(Order,{fishes:this.state.fishes,order:this.state.order,removeFromOrder:this.removeFromOrder}),/*#__PURE__*/_jsx(Inventory,{addFish:this.addFish,updateFish:this.updateFish,deleteFish:this.deleteFish,loadSampleFishes:this.loadSampleFishes,fishes:this.state.fishes,storeId:this.props.match.params.storeId//pass the store name to Inventory.js\n})]});}}]);return App;}(React.Component);export default App;/**A NOTE ON PROPS AND STATE - state is where the data is held, its home if you like.\r\n * PROPS are how that data gets manipulated and moved to another end point\r\n */ /**ANOTHER NOTE == Refer to 'helpers.js' for reg JS functions that operate on the site, but are not\r\n * unique to React and don't need to be rendered as components\r\n */ /**PASSING STATE: <Order fishes {...this.state}/> --- this will pass ALL of state to Order, but we might\r\n * not want that when we add more things to state, but don't want that new data passed. We should only be\r\n * passing data that we explicitly need!\r\n */","map":{"version":3,"sources":["C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/src/components/App.js"],"names":["React","Header","Order","Inventory","sampleFishes","Fish","base","App","state","fishes","order","addFish","fish","Date","now","setState","updateFish","key","updatedFish","deleteFish","loadSampleFishes","addToOrder","removeFromOrder","params","props","match","localStorageRef","localStorage","getItem","storeId","JSON","parse","ref","syncState","context","console","log","setItem","stringify","removeBinding","Object","keys","map","Component"],"mappings":"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","sourcesContent":["import React from 'react';//first thing we need!\r\nimport PropTypes from 'prop-types';\r\nimport Header from './Header';//import here instead of index.js, as it is only needed here\r\nimport Order from './Order';\r\nimport Inventory from './Inventory';\r\nimport sampleFishes from '../sample-fishes';\r\nimport Fish from './Fish';\r\nimport base from \"../base\";//so we can mirror to DB\r\n\r\nclass App extends React.Component{\r\n\r\n    //we need to create state now, and move the data from the form in. We set an INITIAL state:\r\n    //state and the methods that update state must be in same component\r\n\r\n    state = {\r\n        fishes:{},\r\n        order:{}\r\n    };\r\n\r\n    //proptype data validation for this.props.match --- only props in this component\r\n    static propTypes ={\r\n        match: PropTypes.object.isRequired\r\n    };\r\n\r\n    //now we need to sync with the DB:\r\ncomponentDidMount(){\r\n    const {params}= this.props.match;//check path on dev tools!\r\n    //WE MUST re-instate local storage here, otherwise it is overwritten when page refreshes\r\n    const localStorageRef = localStorage.getItem(params.storeId);\r\n    \r\n    if(localStorageRef){\r\n        this.setState({order: JSON.parse(localStorageRef)});\r\n    }\r\n    //we do '/fishes' to get to the fishes object which we need to mirror to the DB\r\n    this.ref = base.syncState(`${params.storeId}/fishes`, {\r\n        context: this,\r\n        state: 'fishes'\r\n    });\r\n};\r\n\r\ncomponentDidUpdate(){\r\n    console.log(\"updated\");\r\n    localStorage.setItem(this.props.match.params.storeId, JSON.stringify(this.state.order));\r\n    //above has two args - the key name (store Id), and the state/item/key value we want to store\r\n    //check above path on Dev Tools! state.order is an object, so we must use stringify to extract the data\r\n    console.log(this.state);\r\n}\r\n\r\n//this method unmounts the app when user back-pages out of current state/DB mirror\r\ncomponentWillUnmount(){\r\n    base.removeBinding(this.ref);\r\n};\r\n    //below is how we add to state - three step process:\r\naddFish = (fish)=>{\r\n    //1-take a copy of exisiting state - we don't want to modify it directly\r\n    const fishes = {...this.state.fishes};//use spread\r\n    //2-add new fish to fishes variable/object- using date.now here gives a unique value to each fish\r\n    fishes[`fish${Date.now()}`]=fish;//this 'fish' is taken from addFishForm.js data, i.e user input\r\n    //3 - set new fishes object to state\r\n    this.setState({\r\n        fishes:fishes //can also say just 'fishes'. Also, note we are updating a PIECE of state (no 'order' yet)\r\n    });\r\n//the above setState call basically overrides the initially set state above (line 11), populates with data;\r\n};\r\n\r\nupdateFish = (key, updatedFish) =>{\r\n    //take a copy of the current state\r\n    const fishes = {...this.state.fishes};\r\n    //update that state\r\n    fishes[key]=updatedFish;\r\n    //set to state\r\n    this.setState ({fishes:fishes});\r\n};\r\n\r\ndeleteFish = (key)=>{\r\n    //take a copy of state\r\n    const fishes = {...this.state.fishes};\r\n    //update state\r\n    fishes[key]=null;\r\n    //update state\r\n    this.setState({fishes:fishes});\r\n}\r\n\r\nloadSampleFishes = ()=>{\r\n   this.setState({fishes:sampleFishes});\r\n};\r\n\r\naddToOrder = (key)=>{ //we need to be able to use and access 'key', but we can't without passing it as a prop\r\n    //1.Take a copy of state:\r\n    const order = {...this.state.order};\r\n    //2.add to order/update number in order\r\n    order[key] = order[key] +1 || 1; // increments count of whatever fish is in order\r\n    //3. call setState to update order state\r\n    this.setState({ order:order });\r\n};\r\n\r\nremoveFromOrder = (key)=>{\r\n    //1.Take a copy of state:\r\n    const order = {...this.state.order};\r\n    //2.remove this item from order\r\n    delete order[key]; // increments count of whatever fish is in order. We can use delete because no Firebase here, we use local storage\r\n    //3. call setState to update order state\r\n    this.setState({ order:order });\r\n}\r\n//NOTE = ALL METHODS/DATA is passed to components via PROPS\r\n//REMEMBER TO MANUALLY CHECK METHODS in dev tools, using '$r.${methodName(\"whatever args\")}'\r\n\r\n\r\nrender (){\r\n    return (\r\n        <div className=\"catch-of-the-day\">\r\n            <div className=\"menu\">\r\n                <Header tagline=\"Fresh Seafood Market\" age={500} cool=\"true\"/>\r\n             \r\n              {/*  <Header tagline=\"Wes Is Cool\" />   this creates ANOTHER INSTANCE of Header */}\r\n            <ul className=\"fishes\">\r\n            {Object.keys(this.state.fishes).map(key=> \r\n            <Fish \r\n            key={key} \r\n            index={key}//this allows us to pass the 'key' as a prop, otherwise we have no access. DEV TOOLS\r\n            details={this.state.fishes[key]} \r\n            addToOrder={this.addToOrder}    \r\n            />\r\n            )} {/**Object.keys gives us each fish key for each fish object, i.e fish1, fish2 etc */}\r\n\r\n            </ul>\r\n            \r\n            </div>\r\n            <Order \r\n            fishes={this.state.fishes} \r\n            order={this.state.order}\r\n            removeFromOrder={this.removeFromOrder}    \r\n            />\r\n            <Inventory \r\n            addFish={this.addFish} \r\n            updateFish={this.updateFish}\r\n            deleteFish={this.deleteFish}\r\n            loadSampleFishes={this.loadSampleFishes} \r\n            fishes = {this.state.fishes}  \r\n            storeId = {this.props.match.params.storeId} //pass the store name to Inventory.js\r\n            />\r\n        </div>\r\n    );\r\n}\r\n}\r\nexport default App;\r\n\r\n/**A NOTE ON PROPS AND STATE - state is where the data is held, its home if you like.\r\n * PROPS are how that data gets manipulated and moved to another end point\r\n */\r\n/**ANOTHER NOTE == Refer to 'helpers.js' for reg JS functions that operate on the site, but are not\r\n * unique to React and don't need to be rendered as components\r\n */\r\n/**PASSING STATE: <Order fishes {...this.state}/> --- this will pass ALL of state to Order, but we might\r\n * not want that when we add more things to state, but don't want that new data passed. We should only be\r\n * passing data that we explicitly need!\r\n */\r\n"]},"metadata":{},"sourceType":"module"}