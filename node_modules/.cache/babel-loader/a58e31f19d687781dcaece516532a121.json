{"ast":null,"code":"import _objectSpread from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Owner\\\\React-For-Beginners-Starter-Files-master\\\\React-For-Beginners-Starter-Files-master\\\\catch-of-the-day\\\\src\\\\components\\\\App.js\";\nimport React from 'react'; //first thing we need!\n\nimport PropTypes from 'prop-types';\nimport Header from './Header'; //import here instead of index.js, as it is only needed here\n\nimport Order from './Order';\nimport Inventory from './Inventory';\nimport sampleFishes from '../sample-fishes';\nimport Fish from './Fish';\nimport base from \"../base\"; //so we can mirror to DB\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar App = /*#__PURE__*/function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      fishes: {},\n      order: {}\n    };\n\n    _this.addFish = function (fish) {\n      //1-take a copy of exisiting state - we don't want to modify it directly\n      var fishes = _objectSpread({}, _this.state.fishes); //use spread\n      //2-add new fish to fishes variable/object- using date.now here gives a unique value to each fish\n\n\n      fishes[\"fish\".concat(Date.now())] = fish; //this 'fish' is taken from addFishForm.js data, i.e user input\n      //3 - set new fishes object to state\n\n      _this.setState({\n        fishes: fishes //can also say just 'fishes'. Also, note we are updating a PIECE of state (no 'order' yet)\n\n      }); //the above setState call basically overrides the initially set state above (line 11), populates with data;\n\n    };\n\n    _this.updateFish = function (key, updatedFish) {\n      //take a copy of the current state\n      var fishes = _objectSpread({}, _this.state.fishes); //update that state\n\n\n      fishes[key] = updatedFish; //set to state\n\n      _this.setState({\n        fishes: fishes\n      });\n    };\n\n    _this.deleteFish = function (key) {\n      //take a copy of state\n      var fishes = _objectSpread({}, _this.state.fishes); //update state\n\n\n      fishes[key] = null; //update state\n\n      _this.setState({\n        fishes: fishes\n      });\n    };\n\n    _this.loadSampleFishes = function () {\n      _this.setState({\n        fishes: sampleFishes\n      });\n    };\n\n    _this.addToOrder = function (key) {\n      //we need to be able to use and access 'key', but we can't without passing it as a prop\n      //1.Take a copy of state:\n      var order = _objectSpread({}, _this.state.order); //2.add to order/update number in order\n\n\n      order[key] = order[key] + 1 || 1; // increments count of whatever fish is in order\n      //3. call setState to update order state\n\n      _this.setState({\n        order: order\n      });\n    };\n\n    _this.removeFromOrder = function (key) {\n      //1.Take a copy of state:\n      var order = _objectSpread({}, _this.state.order); //2.remove this item from order\n\n\n      delete order[key]; // increments count of whatever fish is in order. We can use delete because no Firebase here, we use local storage\n      //3. call setState to update order state\n\n      _this.setState({\n        order: order\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: //now we need to sync with the DB:\n    function componentDidMount() {\n      var params = this.props.match.params; //check path on dev tools!\n      //WE MUST re-instate local storage here, otherwise it is overwritten when page refreshes\n\n      var localStorageRef = localStorage.getItem(params.storeId);\n\n      if (localStorageRef) {\n        this.setState({\n          order: JSON.parse(localStorageRef)\n        });\n      } //we do '/fishes' to get to the fishes object which we need to mirror to the DB\n\n\n      this.ref = base.syncState(\"\".concat(params.storeId, \"/fishes\"), {\n        context: this,\n        state: 'fishes'\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      console.log(\"updated\");\n      localStorage.setItem(this.props.match.params.storeId, JSON.stringify(this.state.order)); //above has two args - the key name (store Id), and the state/item/key value we want to store\n      //check above path on Dev Tools! state.order is an object, so we must use stringify to extract the data\n\n      console.log(this.state);\n    } //this method unmounts the app when user back-pages out of current state/DB mirror\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      base.removeBinding(this.ref);\n    }\n  }, {\n    key: \"render\",\n    value: //NOTE = ALL METHODS/DATA is passed to components via PROPS\n    //REMEMBER TO MANUALLY CHECK METHODS in dev tools, using '$r.${methodName(\"whatever args\")}'\n    function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"catch-of-the-day\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"menu\",\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            tagline: \"Fresh Seafood Market\",\n            age: 500,\n            cool: \"true\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"fishes\",\n            children: [Object.keys(this.state.fishes).map(function (key) {\n              return /*#__PURE__*/_jsxDEV(Fish, {\n                index: key //this allows us to pass the 'key' as a prop, otherwise we have no access. DEV TOOLS\n                ,\n                details: _this2.state.fishes[key],\n                addToOrder: _this2.addToOrder\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 13\n              }, _this2);\n            }), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Order, {\n          fishes: this.state.fishes,\n          order: this.state.order,\n          removeFromOrder: this.removeFromOrder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Inventory, {\n          addFish: this.addFish,\n          updateFish: this.updateFish,\n          deleteFish: this.deleteFish,\n          loadSampleFishes: this.loadSampleFishes,\n          fishes: this.state.fishes,\n          storeId: this.props.match.params.storeId //pass the store name to Inventory.js\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this);\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nApp.propTypes = {\n  match: PropTypes.object.isRequired\n};\nexport default App;\n/**A NOTE ON PROPS AND STATE - state is where the data is held, its home if you like.\r\n * PROPS are how that data gets manipulated and moved to another end point\r\n */\n\n/**ANOTHER NOTE == Refer to 'helpers.js' for reg JS functions that operate on the site, but are not\r\n * unique to React and don't need to be rendered as components\r\n */\n\n/**PASSING STATE: <Order fishes {...this.state}/> --- this will pass ALL of state to Order, but we might\r\n * not want that when we add more things to state, but don't want that new data passed. We should only be\r\n * passing data that we explicitly need!\r\n */","map":{"version":3,"sources":["C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/src/components/App.js"],"names":["React","PropTypes","Header","Order","Inventory","sampleFishes","Fish","base","App","state","fishes","order","addFish","fish","Date","now","setState","updateFish","key","updatedFish","deleteFish","loadSampleFishes","addToOrder","removeFromOrder","params","props","match","localStorageRef","localStorage","getItem","storeId","JSON","parse","ref","syncState","context","console","log","setItem","stringify","removeBinding","Object","keys","map","Component","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';//first thing we need!\r\nimport PropTypes from 'prop-types';\r\nimport Header from './Header';//import here instead of index.js, as it is only needed here\r\nimport Order from './Order';\r\nimport Inventory from './Inventory';\r\nimport sampleFishes from '../sample-fishes';\r\nimport Fish from './Fish';\r\nimport base from \"../base\";//so we can mirror to DB\r\n\r\nclass App extends React.Component{\r\n\r\n    //we need to create state now, and move the data from the form in. We set an INITIAL state:\r\n    //state and the methods that update state must be in same component\r\n\r\n    state = {\r\n        fishes:{},\r\n        order:{}\r\n    };\r\n\r\n    //proptype data validation for this.props.match --- only props in this component\r\n    static propTypes ={\r\n        match: PropTypes.object.isRequired\r\n    };\r\n\r\n    //now we need to sync with the DB:\r\ncomponentDidMount(){\r\n    const {params}= this.props.match;//check path on dev tools!\r\n    //WE MUST re-instate local storage here, otherwise it is overwritten when page refreshes\r\n    const localStorageRef = localStorage.getItem(params.storeId);\r\n    \r\n    if(localStorageRef){\r\n        this.setState({order: JSON.parse(localStorageRef)});\r\n    }\r\n    //we do '/fishes' to get to the fishes object which we need to mirror to the DB\r\n    this.ref = base.syncState(`${params.storeId}/fishes`, {\r\n        context: this,\r\n        state: 'fishes'\r\n    });\r\n};\r\n\r\ncomponentDidUpdate(){\r\n    console.log(\"updated\");\r\n    localStorage.setItem(this.props.match.params.storeId, JSON.stringify(this.state.order));\r\n    //above has two args - the key name (store Id), and the state/item/key value we want to store\r\n    //check above path on Dev Tools! state.order is an object, so we must use stringify to extract the data\r\n    console.log(this.state);\r\n}\r\n\r\n//this method unmounts the app when user back-pages out of current state/DB mirror\r\ncomponentWillUnmount(){\r\n    base.removeBinding(this.ref);\r\n};\r\n    //below is how we add to state - three step process:\r\naddFish = (fish)=>{\r\n    //1-take a copy of exisiting state - we don't want to modify it directly\r\n    const fishes = {...this.state.fishes};//use spread\r\n    //2-add new fish to fishes variable/object- using date.now here gives a unique value to each fish\r\n    fishes[`fish${Date.now()}`]=fish;//this 'fish' is taken from addFishForm.js data, i.e user input\r\n    //3 - set new fishes object to state\r\n    this.setState({\r\n        fishes:fishes //can also say just 'fishes'. Also, note we are updating a PIECE of state (no 'order' yet)\r\n    });\r\n//the above setState call basically overrides the initially set state above (line 11), populates with data;\r\n};\r\n\r\nupdateFish = (key, updatedFish) =>{\r\n    //take a copy of the current state\r\n    const fishes = {...this.state.fishes};\r\n    //update that state\r\n    fishes[key]=updatedFish;\r\n    //set to state\r\n    this.setState ({fishes:fishes});\r\n};\r\n\r\ndeleteFish = (key)=>{\r\n    //take a copy of state\r\n    const fishes = {...this.state.fishes};\r\n    //update state\r\n    fishes[key]=null;\r\n    //update state\r\n    this.setState({fishes:fishes});\r\n}\r\n\r\nloadSampleFishes = ()=>{\r\n   this.setState({fishes:sampleFishes});\r\n};\r\n\r\naddToOrder = (key)=>{ //we need to be able to use and access 'key', but we can't without passing it as a prop\r\n    //1.Take a copy of state:\r\n    const order = {...this.state.order};\r\n    //2.add to order/update number in order\r\n    order[key] = order[key] +1 || 1; // increments count of whatever fish is in order\r\n    //3. call setState to update order state\r\n    this.setState({ order:order });\r\n};\r\n\r\nremoveFromOrder = (key)=>{\r\n    //1.Take a copy of state:\r\n    const order = {...this.state.order};\r\n    //2.remove this item from order\r\n    delete order[key]; // increments count of whatever fish is in order. We can use delete because no Firebase here, we use local storage\r\n    //3. call setState to update order state\r\n    this.setState({ order:order });\r\n}\r\n//NOTE = ALL METHODS/DATA is passed to components via PROPS\r\n//REMEMBER TO MANUALLY CHECK METHODS in dev tools, using '$r.${methodName(\"whatever args\")}'\r\n\r\n\r\nrender (){\r\n    return (\r\n        <div className=\"catch-of-the-day\">\r\n            <div className=\"menu\">\r\n                <Header tagline=\"Fresh Seafood Market\" age={500} cool=\"true\"/>\r\n             \r\n              {/*  <Header tagline=\"Wes Is Cool\" />   this creates ANOTHER INSTANCE of Header */}\r\n            <ul className=\"fishes\">\r\n            {Object.keys(this.state.fishes).map(key=> \r\n            <Fish \r\n            key={key} \r\n            index={key}//this allows us to pass the 'key' as a prop, otherwise we have no access. DEV TOOLS\r\n            details={this.state.fishes[key]} \r\n            addToOrder={this.addToOrder}    \r\n            />\r\n            )} {/**Object.keys gives us each fish key for each fish object, i.e fish1, fish2 etc */}\r\n\r\n            </ul>\r\n            \r\n            </div>\r\n            <Order \r\n            fishes={this.state.fishes} \r\n            order={this.state.order}\r\n            removeFromOrder={this.removeFromOrder}    \r\n            />\r\n            <Inventory \r\n            addFish={this.addFish} \r\n            updateFish={this.updateFish}\r\n            deleteFish={this.deleteFish}\r\n            loadSampleFishes={this.loadSampleFishes} \r\n            fishes = {this.state.fishes}  \r\n            storeId = {this.props.match.params.storeId} //pass the store name to Inventory.js\r\n            />\r\n        </div>\r\n    );\r\n}\r\n}\r\nexport default App;\r\n\r\n/**A NOTE ON PROPS AND STATE - state is where the data is held, its home if you like.\r\n * PROPS are how that data gets manipulated and moved to another end point\r\n */\r\n/**ANOTHER NOTE == Refer to 'helpers.js' for reg JS functions that operate on the site, but are not\r\n * unique to React and don't need to be rendered as components\r\n */\r\n/**PASSING STATE: <Order fishes {...this.state}/> --- this will pass ALL of state to Order, but we might\r\n * not want that when we add more things to state, but don't want that new data passed. We should only be\r\n * passing data that we explicitly need!\r\n */\r\n"]},"metadata":{},"sourceType":"module"}