{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\React-For-Beginners-Starter-Files-master\\\\React-For-Beginners-Starter-Files-master\\\\catch-of-the-day\\\\src\\\\components\\\\Header.js\",\n    _this = this;\n\nimport React from 'react';\nimport PropTypes from \"prop-types\"; //separate package from React - there are other ways too, FB's Flow etc \n\n/**The below code utilizes an arrow function syntax to code a header component. It is called\r\n * a STATELESS FUNCTIONAL COMPONENT Note the difference between this and the further code below. Where\r\n * '({tagline, age})' is used, we can also write ({props}), and then write '{props.tagline}' below etc.\r\n * WE USE THESE STATELESS COMPONENTS when it is just a component that received some prop data and spits\r\n * it back out. Saves a little on efficiency. We still need to write components the other way if they do \r\n * more than this.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Header = function Header(_ref) {\n  var tagline = _ref.tagline,\n      age = _ref.age;\n  return (\n    /*#__PURE__*/\n    //destructuring the props gives us these two variables to use\n    _jsxDEV(\"header\", {\n      className: \"top\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Catch\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ofThe\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"of\",\n            children: \"Of\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"the\",\n            children: \"The\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 17\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 13\n        }, _this), \"Day\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"tagline\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: tagline\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, _this)\n  );\n};\n\n_c = Header;\nHeader.PropTypes = {\n  tagline: PropTypes.string.isRequired\n};\n/** \r\nclass Header extends React.Component{\r\n    render() {\r\n        return (\r\n\r\n        <React.Fragment>\r\n        <header className=\"top\">\r\n            <h1>\r\n            Catch \r\n            <span className=\"ofThe\">\r\n                <span className =\"of\">Of</span>\r\n                <span className=\"the\">The</span>\r\n            </span>\r\n            Day\r\n            </h1>\r\n            <h3 className=\"tagline\">\r\n            <span>{this.props.tagline}</span>{/**we want to make this DYNAMIC so we can change at any time, \r\n                                            see App.js */\n///}\n\n/*    </h3>\r\n    </header>\r\n    </React.Fragment>\r\n\r\n        )\r\n    }\r\n}\r\n*/\n\nexport default Header;\n/**NOTES: Looking at the code above (and App.js), we can see that we gave some data in object form\r\n * to the header element (tagline, age and our own made-up prop, cool). This data can be accessed in the \r\n * Header.js file as you can see above. We need {}s since we revert to JS to call this data.\r\n * \r\n * NOTE about '$r' - use this in dev tools, when a component is selected, go to the console and type in $r.\r\n * this will return all the info (props, state etc) regarding this selected react component (or any element). \r\n * '$0' can be used in the same way for regular HTML elements.\r\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/src/components/Header.js"],"names":["React","PropTypes","Header","tagline","age","string","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAAmC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,MAAEC,OAAF,QAAEA,OAAF;AAAA,MAAWC,GAAX,QAAWA,GAAX;AAAA;AAAA;AAAqB;AAC5B;AAAQ,MAAA,SAAS,EAAC,KAAlB;AAAA,8BACI;AAAA,yCAEA;AAAM,UAAA,SAAS,EAAC,OAAhB;AAAA,kCACI;AAAM,YAAA,SAAS,EAAE,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,eAEI;AAAM,YAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,eASI;AAAI,QAAA,SAAS,EAAC,SAAd;AAAA,+BACA;AAAA,oBAAOD;AAAP;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,eATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADO;AAAA,CAAf;;KAAMD,M;AAiBNA,MAAM,CAACD,SAAP,GAAkB;AACdE,EAAAA,OAAO,EAAEF,SAAS,CAACI,MAAV,CAAiBC;AADZ,CAAlB;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAyD;;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeJ,MAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\r\nimport PropTypes from \"prop-types\";//separate package from React - there are other ways too, FB's Flow etc \r\n\r\n/**The below code utilizes an arrow function syntax to code a header component. It is called\r\n * a STATELESS FUNCTIONAL COMPONENT Note the difference between this and the further code below. Where\r\n * '({tagline, age})' is used, we can also write ({props}), and then write '{props.tagline}' below etc.\r\n * WE USE THESE STATELESS COMPONENTS when it is just a component that received some prop data and spits\r\n * it back out. Saves a little on efficiency. We still need to write components the other way if they do \r\n * more than this.\r\n */\r\nconst Header = ({tagline, age})=> ( //destructuring the props gives us these two variables to use\r\n        <header className=\"top\">\r\n            <h1>\r\n            Catch \r\n            <span className=\"ofThe\">\r\n                <span className =\"of\">Of</span>\r\n                <span className=\"the\">The</span>\r\n            </span>\r\n            Day\r\n            </h1>\r\n            <h3 className=\"tagline\">\r\n            <span>{tagline}</span>{/**we want to make this DYNAMIC so we can change at any time, \r\n                                            see App.js */}\r\n    </h3>\r\n    </header>\r\n    );\r\n\r\nHeader.PropTypes ={\r\n    tagline: PropTypes.string.isRequired\r\n};\r\n\r\n\r\n\r\n\r\n/** \r\nclass Header extends React.Component{\r\n    render() {\r\n        return (\r\n\r\n        <React.Fragment>\r\n        <header className=\"top\">\r\n            <h1>\r\n            Catch \r\n            <span className=\"ofThe\">\r\n                <span className =\"of\">Of</span>\r\n                <span className=\"the\">The</span>\r\n            </span>\r\n            Day\r\n            </h1>\r\n            <h3 className=\"tagline\">\r\n            <span>{this.props.tagline}</span>{/**we want to make this DYNAMIC so we can change at any time, \r\n                                            see App.js *////}\r\n/*    </h3>\r\n    </header>\r\n    </React.Fragment>\r\n\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\nexport default Header;\r\n/**NOTES: Looking at the code above (and App.js), we can see that we gave some data in object form\r\n * to the header element (tagline, age and our own made-up prop, cool). This data can be accessed in the \r\n * Header.js file as you can see above. We need {}s since we revert to JS to call this data.\r\n * \r\n * NOTE about '$r' - use this in dev tools, when a component is selected, go to the console and type in $r.\r\n * this will return all the info (props, state etc) regarding this selected react component (or any element). \r\n * '$0' can be used in the same way for regular HTML elements.\r\n */"]},"metadata":{},"sourceType":"module"}