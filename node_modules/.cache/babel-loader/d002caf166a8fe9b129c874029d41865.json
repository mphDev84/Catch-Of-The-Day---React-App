{"ast":null,"code":"import _objectSpread from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Owner\\\\React-For-Beginners-Starter-Files-master\\\\React-For-Beginners-Starter-Files-master\\\\catch-of-the-day\\\\src\\\\components\\\\App.js\";\nimport React from 'react'; //first thing we need!\n\nimport Header from './Header'; //import here instead of index.js, as it is only needed here\n\nimport Order from './Order';\nimport Inventory from './Inventory';\nimport sampleFishes from '../sample-fishes';\nimport Fish from './Fish';\nimport base from \"../base\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar App = /*#__PURE__*/function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      fishes: {},\n      order: {}\n    };\n\n    _this.addFish = function (fish) {\n      //1-take a copy of exisiting state - we don't want to modify it directly\n      var fishes = _objectSpread({}, _this.state.fishes); //use spread\n      //2-add new fish to fishes variable/object- using date.now here gives a unique value to each fish\n\n\n      fishes[\"fish\".concat(Date.now())] = fish; //this 'fish' is taken from addFishForm.js data, i.e user input\n      //3 - set new fishes object to state\n\n      _this.setState({\n        fishes: fishes //can also say just 'fishes'. Also, note we are updating a PIECE of state (no 'order' yet)\n\n      }); //the above setState call basically overrides the initially set state above (line 11), populates with data;\n\n    };\n\n    _this.loadSampleFishes = function () {\n      _this.setState({\n        fishes: sampleFishes\n      });\n    };\n\n    _this.addToOrder = function (key) {\n      //we need to be able to use and access 'key', but we can't without passing it as a prop\n      //1.Take a copy of state:\n      var order = _objectSpread({}, _this.state.order); //2.add to order/update number in order\n\n\n      order[key] = order[key] + 1 || 1; // increments count of whatever fish is in order\n      //3. call setState to update order state\n\n      _this.setState({\n        order: order\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: //now we need to sync with the DB\n    //we do '/fishes' to get to the fishes object which we need to mirror to the DB\n    function componentDidMount() {\n      var params = this.props.match.params;\n      this.ref = base.syncState(\"\".concat(params.storeId, \"/fishes\"), {});\n    } //below is how we add to state - three step process:\n\n  }, {\n    key: \"render\",\n    value: //NOTE = ALL METHODS/DATA is passed to components via PROPS\n    function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"catch-of-the-day\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"menu\",\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            tagline: \"Fresh Seafood Market\",\n            age: 500,\n            cool: \"true\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"fishes\",\n            children: [Object.keys(this.state.fishes).map(function (key) {\n              return /*#__PURE__*/_jsxDEV(Fish, {\n                index: key //this allows us to pass the 'key' as a prop, otherwise we have no access. DEV TOOLS\n                ,\n                details: _this2.state.fishes[key],\n                addToOrder: _this2.addToOrder\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 13\n              }, _this2);\n            }), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Order, {\n          fishes: this.state.fishes,\n          order: this.state.order\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Inventory, {\n          addFish: this.addFish,\n          loadSampleFishes: this.loadSampleFishes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this);\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;\n/**A NOTE ON PROPS AND STATE - state is where the data is held, its home if you like.\r\n * PROPS are how that data gets manipulated and moved to another end point\r\n */\n\n/**ANOTHER NOTE == Refer to 'helpers.js' for reg JS functions that operate on the site, but are not\r\n * unique to React and don't need to be rendered as components\r\n */\n\n/**PASSING STATE: <Order fishes {...this.state}/> --- this will pass ALL of state to Order, but we might\r\n * not want that when we add more things to state, but don't want that new data passed. We should only be\r\n * passing data that we explicitly need!\r\n */","map":{"version":3,"sources":["C:/Users/Owner/React-For-Beginners-Starter-Files-master/React-For-Beginners-Starter-Files-master/catch-of-the-day/src/components/App.js"],"names":["React","Header","Order","Inventory","sampleFishes","Fish","base","App","state","fishes","order","addFish","fish","Date","now","setState","loadSampleFishes","addToOrder","key","params","props","match","ref","syncState","storeId","Object","keys","map","Component"],"mappings":"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","sourcesContent":["import React from 'react';//first thing we need!\r\nimport Header from './Header';//import here instead of index.js, as it is only needed here\r\nimport Order from './Order';\r\nimport Inventory from './Inventory';\r\nimport sampleFishes from '../sample-fishes';\r\nimport Fish from './Fish';\r\nimport base from \"../base\";\r\n\r\nclass App extends React.Component{\r\n\r\n    //we need to create state now, and move the data from the form in. We set an INITIAL state:\r\n    //state and the methods that update state must be in same component\r\n\r\n    state = {\r\n        fishes:{},\r\n        order:{}\r\n    };\r\n\r\n    //now we need to sync with the DB\r\n    //we do '/fishes' to get to the fishes object which we need to mirror to the DB\r\ncomponentDidMount(){\r\n    const {params}= this.props.match;\r\n    this.ref = base.syncState(`${params.storeId}/fishes`, {\r\n\r\n    });\r\n}\r\n\r\n\r\n\r\n    //below is how we add to state - three step process:\r\n    addFish = (fish)=>{\r\n    //1-take a copy of exisiting state - we don't want to modify it directly\r\n    const fishes = {...this.state.fishes};//use spread\r\n    //2-add new fish to fishes variable/object- using date.now here gives a unique value to each fish\r\n    fishes[`fish${Date.now()}`]=fish;//this 'fish' is taken from addFishForm.js data, i.e user input\r\n    //3 - set new fishes object to state\r\n    this.setState({\r\n        fishes:fishes //can also say just 'fishes'. Also, note we are updating a PIECE of state (no 'order' yet)\r\n    });\r\n//the above setState call basically overrides the initially set state above (line 11), populates with data;\r\n};\r\n\r\nloadSampleFishes=()=>{\r\n   this.setState({fishes:sampleFishes});\r\n};\r\n\r\naddToOrder=(key)=>{ //we need to be able to use and access 'key', but we can't without passing it as a prop\r\n    //1.Take a copy of state:\r\n    const order = {...this.state.order};\r\n    //2.add to order/update number in order\r\n    order[key] = order[key] +1 || 1; // increments count of whatever fish is in order\r\n    //3. call setState to update order state\r\n    this.setState({\r\n        order:order\r\n    });\r\n\r\n}\r\n//NOTE = ALL METHODS/DATA is passed to components via PROPS\r\n\r\nrender (){\r\n    return (\r\n        <div className=\"catch-of-the-day\">\r\n            <div className=\"menu\">\r\n                <Header tagline=\"Fresh Seafood Market\" age={500} cool=\"true\"/>\r\n             \r\n              {/*  <Header tagline=\"Wes Is Cool\" />   this creates ANOTHER INSTANCE of Header */}\r\n            <ul className=\"fishes\">\r\n            {Object.keys(this.state.fishes).map(key=> \r\n            <Fish \r\n            key={key} \r\n            index={key}//this allows us to pass the 'key' as a prop, otherwise we have no access. DEV TOOLS\r\n            details={this.state.fishes[key]} \r\n            addToOrder={this.addToOrder}    \r\n            />\r\n            )} {/**Object.keys gives us each fish key for each fish object, i.e fish1, fish2 etc */}\r\n\r\n            </ul>\r\n            \r\n            </div>\r\n            <Order fishes={this.state.fishes} order={this.state.order}/>\r\n            <Inventory addFish={this.addFish} loadSampleFishes={this.loadSampleFishes} />\r\n        </div>\r\n    );\r\n}\r\n}\r\nexport default App;\r\n\r\n/**A NOTE ON PROPS AND STATE - state is where the data is held, its home if you like.\r\n * PROPS are how that data gets manipulated and moved to another end point\r\n */\r\n/**ANOTHER NOTE == Refer to 'helpers.js' for reg JS functions that operate on the site, but are not\r\n * unique to React and don't need to be rendered as components\r\n */\r\n/**PASSING STATE: <Order fishes {...this.state}/> --- this will pass ALL of state to Order, but we might\r\n * not want that when we add more things to state, but don't want that new data passed. We should only be\r\n * passing data that we explicitly need!\r\n */\r\n"]},"metadata":{},"sourceType":"module"}